import Foundation
import PathKit

public enum Assets {

    public enum swifttemplate {
        public static let allTypes: AssetFile = Files.allTypes
        public static let mock: AssetFile = Files.mock
        public static let prototype: AssetFile = Files.prototype
    }

    public static var mockfileTemplate: String { return """
        # Mockfile is a SwiftyMocky YAML configuration file
        sourceryCommand: null
        unit.tests.mock:    # Name of your mock
          sources:
            include:        # All swift files here would be scanned for AutoMockable types
                - ./MyApp
            exclude: []     # You can exclude files as well
          output:           # Generated mock file location and name
            ./MyAppUnitTests/Mocks/Mock.generated.swift
          targets:          # Specify XCodeproj targets for your mock. Used for linting
            - MyAppUnitTests
          testable: []      # Specify  list of imported/@testable modules referenced in mock
          import: []        # You can use 'swiftymocky autoimport' to update it automatically
        """
    }
}

public protocol AssetFile {

    var name: String { get }
    var data: Data { get }

    func write(to path: Path) throws
}

private struct File: AssetFile {

    let name: String
    let contents: String
    var data: Data { return Data(base64Encoded: contents) ?? Data() }

    func write(to path: Path) throws {
        try path.write(data)
    }
}

private enum Files {
    static let allTypes = File(
        name: "AllTypes.swifttemplate",
        contents: "dHlwZXM6CjwlXyB2YXIgYWxsID0gdHlwZXMuYWxsCiAgICBhbGwgKz0gdHlwZXMucHJvdG9jb2xzLm1hcCB7ICQwIH0gLSU+CjwlXyBmb3IgdHlwZSBpbiBhbGwgeyAtJT48JV8gLSU+CiAgPCVfIGxldCBhdXRvTW9ja2FibGU6IEJvb2wgPSB0eXBlLmluaGVyaXRlZFR5cGVzLmNvbnRhaW5zKCJBdXRvTW9ja2FibGUiKSB8fCB0eXBlLmFubm90YXRpb25zWyJBdXRvTW9ja2FibGUiXSAhPSBuaWwgLSU+CiAgPCVfIGlmIGF1dG9Nb2NrYWJsZSB7IC0lPgogICAgLSA8JT0gdHlwZS5uYW1lICU+CiAgPCVfIH0gLSU+CjwlXyB9IC0lPg=="
    )
    static let mock = File(
        name: "Mock.swifttemplate",
        contents: "PCVfCmZ1bmMgc3dpZnRMaW50UnVsZXMoXyBhcmd1bWVudHM6IFtTdHJpbmc6IEFueV0pIC0+IFtTdHJpbmddIHsKICAgIHJldHVybiBzdHJpbmdBcnJheShmcm9tQXJndW1lbnRzOiBhcmd1bWVudHMsIGZvcktleTogImV4Y2x1ZGVkU3dpZnRMaW50UnVsZXMiKS5tYXAgeyBydWxlIGluCiAgICAgICAgcmV0dXJuICIvL3N3aWZ0bGludDpkaXNhYmxlIFwocnVsZSkiCiAgICB9Cn0KCmZ1bmMgcHJvamVjdEltcG9ydHMoXyBhcmd1bWVudHM6IFtTdHJpbmc6IEFueV0pIC0+IFtTdHJpbmddIHsKICAgIHJldHVybiBpbXBvcnRzKGFyZ3VtZW50cykgKyB0ZXN0YWJsZUltcG9ydHMoYXJndW1lbnRzKQp9CgpmdW5jIGltcG9ydHMoXyBhcmd1bWVudHM6IFtTdHJpbmc6IEFueV0pIC0+IFtTdHJpbmddIHsKICAgIHJldHVybiBzdHJpbmdBcnJheShmcm9tQXJndW1lbnRzOiBhcmd1bWVudHMsIGZvcktleTogImltcG9ydCIpCiAgICAgICAgLm1hcCB7IHJldHVybiAiaW1wb3J0IFwoJDApIiB9Cn0KCmZ1bmMgdGVzdGFibGVJbXBvcnRzKF8gYXJndW1lbnRzOiBbU3RyaW5nOiBBbnldKSAtPiBbU3RyaW5nXSB7CiAgICByZXR1cm4gc3RyaW5nQXJyYXkoZnJvbUFyZ3VtZW50czogYXJndW1lbnRzLCBmb3JLZXk6ICJ0ZXN0YWJsZSIpCiAgICAgICAgLm1hcCB7IHJldHVybiAiQHRlc3RhYmxlIGltcG9ydCBcKCQwKSIgfQp9CgovLy8gW0ludGVybmFsXSBHZXQgdmFsdWUgZnJvbSBkaWN0aW9uYXJ5Ci8vLyAtIFBhcmFtZXRlcnM6Ci8vLyAgIC0gZnJvbUFyZ3VtZW50czogZGljdGlvbmFyeQovLy8gICAtIGZvcktleTogZGljdGlvbmFyeSBrZXkKLy8vIC0gUmV0dXJuczogYXJyYXkgb2Ygc3RyaW5ncywgaWYga2V5IG5vdCBmb3VuZCwgcmV0dXJucyBlbXB0eSBhcnJheS4KLy8vIC0gTm90ZTogSWYgc291cmNlcnkgYXJndW1lbnRzIGNvbnRhaW50cyBvbmx5IG9uZSBlbGVtZW50LCB0aGVuIHNpbmdsZSB2YWx1ZSBpcyBzdG9yZWQsIG90aGVyd2lzZSBhcnJheSBvZiBlbGVtZW50cy4gVGhpcyBtZXRob2QgYWx3YXlzIGdldHMgYXJyYXkgb2YgZWxlbWVudHMuCmZ1bmMgc3RyaW5nQXJyYXkoZnJvbUFyZ3VtZW50cyBhcmd1bWVudHM6IFtTdHJpbmc6IEFueV0sIGZvcktleSBrZXk6IFN0cmluZykgLT4gW1N0cmluZ10gewoKICAgIGlmIGxldCBhcmd1bWVudCA9IGFyZ3VtZW50c1trZXldIGFzPyBTdHJpbmcgewogICAgICAgIHJldHVybiBbYXJndW1lbnRdCiAgICB9IGVsc2UgaWYgbGV0IG1hbnlBcmd1bWVudHMgPSBhcmd1bWVudHNba2V5XSBhcz8gW1N0cmluZ10gewogICAgICAgIHJldHVybiBtYW55QXJndW1lbnRzCiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBbXQogICAgfQp9Cl8lPgovLyBHZW5lcmF0ZWQgd2l0aCBTd2lmdHlNb2NreSAzLjUuMAoKaW1wb3J0IFN3aWZ0eU1vY2t5CiNpZiAhTW9ja3lDdXN0b20KaW1wb3J0IFhDVGVzdAojZW5kaWYKPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IElNUE9SVFMgLSU+PCVfIC0lPgogICAgPCVfIGZvciBwcm9qZWN0SW1wb3J0IGluIHByb2plY3RJbXBvcnRzKGFyZ3VtZW50KSB7IC0lPgogICAgICAgIDwlXyAlPjwlPSBwcm9qZWN0SW1wb3J0ICU+CiAgICA8JV8gfSAtJT4KICAgIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IElNUE9SVFMgSW5BUFAgKGFnZ3JlZ2F0ZWQgYXJndW1lbnQpIC0lPjwlXyAtJT4KICAgIDwlXyBpZiBsZXQgc3dpZnR5TW9ja3lBcmdzID0gYXJndW1lbnRbInN3aWZ0eU1vY2t5Il0gYXM/IFtTdHJpbmc6IEFueV0geyAtJT4KICAgICAgICA8JV8gZm9yIHByb2plY3RJbXBvcnQgaW4gcHJvamVjdEltcG9ydHMoc3dpZnR5TW9ja3lBcmdzKSB7IC0lPgogICAgICAgICAgICA8JV8gJT48JT0gcHJvamVjdEltcG9ydCAlPgogICAgICAgIDwlXyB9IC0lPgogICAgPCVfIH0gLSU+CjwlXwpjbGFzcyBDdXJyZW50IHsKICAgIHN0YXRpYyB2YXIgc2VsZlR5cGU6IFN0cmluZyA9ICJTZWxmIgp9Ci8vIENvbGxpc2lvbiBtYW5hZ2VtZW50CmZ1bmMgYXJlVGhlcmVDb2xsaXNpb25zKGJldHdlZW4gbWV0aG9kczogW01ldGhvZFdyYXBwZXJdKSAtPiBCb29sIHsKICAgIGxldCBnaXZlblNldCA9IFNldDxTdHJpbmc+KG1ldGhvZHMubWFwKHsgJDAuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiIiwgZGVwcmVjYXRlZDogdHJ1ZSwgYW5ub3RhdGVkOiBmYWxzZSkgfSkpCiAgICBndWFyZCBnaXZlblNldC5jb3VudCA9PSBtZXRob2RzLmNvdW50IGVsc2UgeyByZXR1cm4gdHJ1ZSB9IC8vIHRoZXJlIHdvdWxkIGJlIGNvbmZsaWN0cyBpbiBHaXZlbgogICAgbGV0IHZlcmlmeVNldCA9IFNldDxTdHJpbmc+KG1ldGhvZHMubWFwKHsgJDAudmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiIiwgZGVwcmVjYXRlZDogdHJ1ZSwgYW5ub3RhdGVkOiBmYWxzZSkgfSkpCiAgICBndWFyZCB2ZXJpZnlTZXQuY291bnQgPT0gbWV0aG9kcy5jb3VudCBlbHNlIHsgcmV0dXJuIHRydWUgfSAvLyB0aGVyZSB3b3VsZCBiZSBjb25mbGljdHMgaW4gVmVyaWZ5CiAgICByZXR1cm4gZmFsc2UKfQoKLy8gaGVybHBlcnMKZnVuYyB1bmlxdWVzKG1ldGhvZHM6IFtTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kXSkgLT4gW1NvdXJjZXJ5UnVudGltZS5NZXRob2RdIHsKICAgIGZ1bmMgcmV0dXJuVHlwZVN0cmlwcGVkKF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwobWV0aG9kLnJldHVyblR5cGVOYW1lKSIKICAgICAgICB2YXIgc3RyaXBwZWQ6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmF3IH0KICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gcmV0dXJuVHlwZVJhdwogICAgICAgICAgICBzdHJpcHBlZC5yZW1vdmVTdWJyYW5nZSgocmFuZ2UubG93ZXJCb3VuZCkuLi4pCiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHN0cmlwcGVkID0gc3RyaXBwZWQudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiICIpKQogICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgfQoKICAgIGZ1bmMgYXJlU2FtZVBhcmFtcyhfIHAxOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyLCBfIHAyOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyKSAtPiBCb29sIHsKICAgICAgICBndWFyZCBwMS5hcmd1bWVudExhYmVsID09IHAyLmFyZ3VtZW50TGFiZWwgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEubmFtZSA9PSBwMi5uYW1lIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgIGd1YXJkIHAxLmFyZ3VtZW50TGFiZWwgPT0gcDIuYXJndW1lbnRMYWJlbCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICBndWFyZCBwMS50eXBlTmFtZS5uYW1lID09IHAyLnR5cGVOYW1lLm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgPT0gcDIuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmdW5jIGFyZVNhbWVNZXRob2RzKF8gbTE6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QsIF8gbTI6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QpIC0+IEJvb2wgewogICAgICAgIGd1YXJkIG0xLm5hbWUgIT0gbTIubmFtZSBlbHNlIHsgcmV0dXJuIG0xLnJldHVyblR5cGVOYW1lID09IG0yLnJldHVyblR5cGVOYW1lIH0KICAgICAgICBndWFyZCBtMS5zZWxlY3Rvck5hbWUgPT0gbTIuc2VsZWN0b3JOYW1lIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgIGd1YXJkIG0xLnBhcmFtZXRlcnMuY291bnQgPT0gbTIucGFyYW1ldGVycy5jb3VudCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KCiAgICAgICAgbGV0IHAxID0gbTEucGFyYW1ldGVycwogICAgICAgIGxldCBwMiA9IG0yLnBhcmFtZXRlcnMKCiAgICAgICAgZm9yIGkgaW4gMC4uPHAxLmNvdW50IHsKICAgICAgICAgICAgaWYgIWFyZVNhbWVQYXJhbXMocDFbaV0scDJbaV0pIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBtMS5yZXR1cm5UeXBlTmFtZSA9PSBtMi5yZXR1cm5UeXBlTmFtZQogICAgfQoKICAgIHJldHVybiBtZXRob2RzLnJlZHVjZShbXSwgeyAocmVzdWx0LCBlbGVtZW50KSAtPiBbU291cmNlcnlSdW50aW1lLk1ldGhvZF0gaW4KICAgICAgICBndWFyZCAhcmVzdWx0LmNvbnRhaW5zKHdoZXJlOiB7IGFyZVNhbWVNZXRob2RzKCQwLGVsZW1lbnQpIH0pIGVsc2UgeyByZXR1cm4gcmVzdWx0IH0KICAgICAgICByZXR1cm4gcmVzdWx0ICsgW2VsZW1lbnRdCiAgICB9KQp9CgpmdW5jIHVuaXF1ZXNXaXRob3V0R2VuZXJpY0NvbnN0cmFpbnRzKG1ldGhvZHM6IFtTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kXSkgLT4gW1NvdXJjZXJ5UnVudGltZS5NZXRob2RdIHsKICAgIGZ1bmMgcmV0dXJuVHlwZVN0cmlwcGVkKF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwobWV0aG9kLnJldHVyblR5cGVOYW1lKSIKICAgICAgICB2YXIgc3RyaXBwZWQ6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmF3IH0KICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gcmV0dXJuVHlwZVJhdwogICAgICAgICAgICBzdHJpcHBlZC5yZW1vdmVTdWJyYW5nZSgocmFuZ2UubG93ZXJCb3VuZCkuLi4pCiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHN0cmlwcGVkID0gc3RyaXBwZWQudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiICIpKQogICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgfQoKICAgIGZ1bmMgYXJlU2FtZVBhcmFtcyhfIHAxOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyLCBfIHAyOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyKSAtPiBCb29sIHsKICAgICAgICBndWFyZCBwMS5hcmd1bWVudExhYmVsID09IHAyLmFyZ3VtZW50TGFiZWwgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEubmFtZSA9PSBwMi5uYW1lIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgIGd1YXJkIHAxLmFyZ3VtZW50TGFiZWwgPT0gcDIuYXJndW1lbnRMYWJlbCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICBndWFyZCBwMS50eXBlTmFtZS5uYW1lID09IHAyLnR5cGVOYW1lLm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgPT0gcDIuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmdW5jIGFyZVNhbWVNZXRob2RzKF8gbTE6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QsIF8gbTI6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QpIC0+IEJvb2wgewogICAgICAgIGd1YXJkIG0xLm5hbWUgIT0gbTIubmFtZSBlbHNlIHsgcmV0dXJuIHJldHVyblR5cGVTdHJpcHBlZChtMSkgPT0gcmV0dXJuVHlwZVN0cmlwcGVkKG0yKSB9CiAgICAgICAgZ3VhcmQgbTEuc2VsZWN0b3JOYW1lID09IG0yLnNlbGVjdG9yTmFtZSBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICBndWFyZCBtMS5wYXJhbWV0ZXJzLmNvdW50ID09IG0yLnBhcmFtZXRlcnMuY291bnQgZWxzZSB7IHJldHVybiBmYWxzZSB9CgogICAgICAgIGxldCBwMSA9IG0xLnBhcmFtZXRlcnMKICAgICAgICBsZXQgcDIgPSBtMi5wYXJhbWV0ZXJzCgogICAgICAgIGZvciBpIGluIDAuLjxwMS5jb3VudCB7CiAgICAgICAgICAgIGlmICFhcmVTYW1lUGFyYW1zKHAxW2ldLHAyW2ldKSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmV0dXJuVHlwZVN0cmlwcGVkKG0xKSA9PSByZXR1cm5UeXBlU3RyaXBwZWQobTIpCiAgICB9CgogICAgcmV0dXJuIG1ldGhvZHMucmVkdWNlKFtdLCB7IChyZXN1bHQsIGVsZW1lbnQpIC0+IFtTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kXSBpbgogICAgICAgIGd1YXJkICFyZXN1bHQuY29udGFpbnMod2hlcmU6IHsgYXJlU2FtZU1ldGhvZHMoJDAsZWxlbWVudCkgfSkgZWxzZSB7IHJldHVybiByZXN1bHQgfQogICAgICAgIHJldHVybiByZXN1bHQgKyBbZWxlbWVudF0KICAgIH0pCn0KCmZ1bmMgdW5pcXVlcyh2YXJpYWJsZXM6IFtTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGVdKSAtPiBbU291cmNlcnlSdW50aW1lLlZhcmlhYmxlXSB7CiAgICByZXR1cm4gdmFyaWFibGVzLnJlZHVjZShbXSwgeyAocmVzdWx0LCBlbGVtZW50KSAtPiBbU291cmNlcnlSdW50aW1lLlZhcmlhYmxlXSBpbgogICAgICAgIGd1YXJkICFyZXN1bHQuY29udGFpbnMod2hlcmU6IHsgJDAubmFtZSA9PSBlbGVtZW50Lm5hbWUgfSkgZWxzZSB7IHJldHVybiByZXN1bHQgfQogICAgICAgIHJldHVybiByZXN1bHQgKyBbZWxlbWVudF0KICAgIH0pCn0KCmZ1bmMgd3JhcE1ldGhvZChfIG1ldGhvZDogU291cmNlcnlSdW50aW1lLk1ldGhvZCkgLT4gTWV0aG9kV3JhcHBlciB7CiAgICByZXR1cm4gTWV0aG9kV3JhcHBlcihtZXRob2QpCn0KCmZ1bmMgd3JhcFN1YnNjcmlwdChfIHdyYXBwZWQ6IFNvdXJjZXJ5UnVudGltZS5TdWJzY3JpcHQpIC0+IFN1YnNjcmlwdFdyYXBwZXIgewogICAgcmV0dXJuIFN1YnNjcmlwdFdyYXBwZXIod3JhcHBlZCkKfQoKZnVuYyBqdXN0V3JhcChfIHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUpIC0+IFZhcmlhYmxlV3JhcHBlciB7IHJldHVybiB3cmFwUHJvcGVydHkodmFyaWFibGUpIH0KZnVuYyB3cmFwUHJvcGVydHkoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlLCBfIHNjb3BlOiBTdHJpbmcgPSAiIikgLT4gVmFyaWFibGVXcmFwcGVyIHsKICAgIHJldHVybiBWYXJpYWJsZVdyYXBwZXIodmFyaWFibGUsIHNjb3BlOiBzY29wZSkKfQoKZnVuYyBzdHViUHJvcGVydHkoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlLCBfIHNjb3BlOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6IHNjb3BlKQogICAgcmV0dXJuICJcKHdyYXBwZXIucHJvdG90eXBlKVxuXHRcKHdyYXBwZXIucHJpdmF0ZVByb3RvdHlwZSkiCn0KCmZ1bmMgcHJvcGVydHlUeXBlcyhfIHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUpIC0+IFN0cmluZyB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6ICJzY29wZSIpCiAgICByZXR1cm4gIlwod3JhcHBlci5wcm9wZXJ0eUdldCgpKSIgKyAod3JhcHBlci5yZWFkb25seSA/ICIiIDogIlxuXHRcdFwod3JhcHBlci5wcm9wZXJ0eVNldCgpKSIpCn0KCmZ1bmMgcHJvcGVydHlNZXRob2RUeXBlcyhfIHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUpIC0+IFN0cmluZyB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6ICIiKQogICAgcmV0dXJuICJcKHdyYXBwZXIucHJvcGVydHlDYXNlR2V0KCkpIiArICh3cmFwcGVyLnJlYWRvbmx5ID8gIiIgOiAiXG5cdFx0XCh3cmFwcGVyLnByb3BlcnR5Q2FzZVNldCgpKSIpCn0KCmZ1bmMgcHJvcGVydHlNZXRob2RUeXBlc0NvbXBhcmUoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlKSAtPiBTdHJpbmcgewogICAgbGV0IHdyYXBwZXIgPSBWYXJpYWJsZVdyYXBwZXIodmFyaWFibGUsIHNjb3BlOiAiIikKICAgIHJldHVybiAiXCh3cmFwcGVyLnByb3BlcnR5Q2FzZUdldENvbXBhcmUoKSkiICsgKHdyYXBwZXIucmVhZG9ubHkgPyAiIiA6ICJcblx0XHRcdFwod3JhcHBlci5wcm9wZXJ0eUNhc2VTZXRDb21wYXJlKCkpIikKfQoKZnVuYyBwcm9wZXJ0eU1ldGhvZFR5cGVzSW50VmFsdWUoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlKSAtPiBTdHJpbmcgewogICAgbGV0IHdyYXBwZXIgPSBWYXJpYWJsZVdyYXBwZXIodmFyaWFibGUsIHNjb3BlOiAiIikKICAgIHJldHVybiAiXCh3cmFwcGVyLnByb3BlcnR5Q2FzZUdldEludFZhbHVlKCkpIiArICh3cmFwcGVyLnJlYWRvbmx5ID8gIiIgOiAiXG5cdFx0XHRcKHdyYXBwZXIucHJvcGVydHlDYXNlU2V0SW50VmFsdWUoKSkiKQp9CgpmdW5jIHByb3BlcnR5UmVnaXN0ZXIoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlKSB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6ICIiKQogICAgTWV0aG9kV3JhcHBlci5yZWdpc3Rlcih3cmFwcGVyLnByb3BlcnR5Q2FzZUdldE5hbWUsd3JhcHBlci5wcm9wZXJ0eUNhc2VHZXROYW1lLHdyYXBwZXIucHJvcGVydHlDYXNlR2V0TmFtZSkKICAgIGd1YXJkICF3cmFwcGVyLnJlYWRvbmx5IGVsc2UgeyByZXR1cm4gfQogICAgTWV0aG9kV3JhcHBlci5yZWdpc3Rlcih3cmFwcGVyLnByb3BlcnR5Q2FzZVNldE5hbWUsd3JhcHBlci5wcm9wZXJ0eUNhc2VTZXROYW1lLHdyYXBwZXIucHJvcGVydHlDYXNlR2V0TmFtZSkKfQpjbGFzcyBIZWxwZXJzIHsKICAgIHN0YXRpYyBmdW5jIHNwbGl0KF8gc3RyaW5nOiBTdHJpbmcsIGJ5Rmlyc3RPY2N1cmVuY2VPZiB3b3JkOiBTdHJpbmcpIC0+IChTdHJpbmcsIFN0cmluZykgewogICAgICAgIGd1YXJkIGxldCB3b3JkUmFuZ2UgPSBzdHJpbmcucmFuZ2Uob2Y6IHdvcmQpIGVsc2UgeyByZXR1cm4gKHN0cmluZywgIiIpIH0KICAgICAgICBsZXQgc2VsZlJhbmdlID0gc3RyaW5nLnJhbmdlKG9mOiBzdHJpbmcpIQogICAgICAgIGxldCBiZWZvcmUgPSBTdHJpbmcoc3RyaW5nW3NlbGZSYW5nZS5sb3dlckJvdW5kLi48d29yZFJhbmdlLmxvd2VyQm91bmRdKQogICAgICAgIGxldCBhZnRlciA9IFN0cmluZyhzdHJpbmdbd29yZFJhbmdlLnVwcGVyQm91bmQuLjxzZWxmUmFuZ2UudXBwZXJCb3VuZF0pCiAgICAgICAgcmV0dXJuIChiZWZvcmUsIGFmdGVyKQogICAgfQogICAgc3RhdGljIGZ1bmMgZXh0cmFjdEFzc29jaWF0ZWRUeXBlcyhmcm9tIGFubm90YXRlZDogU291cmNlcnlSdW50aW1lLkFubm90YXRlZCkgLT4gW1N0cmluZ10/IHsKICAgICAgICBpZiBsZXQgdHlwZXMgPSBhbm5vdGF0ZWQuYW5ub3RhdGlvbnNbImFzc29jaWF0ZWR0eXBlIl0gYXM/IFtTdHJpbmddIHsKICAgICAgICAgICAgcmV0dXJuIHR5cGVzLnJldmVyc2VkKCkKICAgICAgICB9IGVsc2UgaWYgbGV0IHR5cGUgPSBhbm5vdGF0ZWQuYW5ub3RhdGlvbnNbImFzc29jaWF0ZWR0eXBlIl0gYXM/IFN0cmluZyB7CiAgICAgICAgICAgIHJldHVybiBbdHlwZV0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gbmlsCiAgICAgICAgfQogICAgfQogICAgLy8vIEV4dHJhY3QgYWxsIHR5cGVhbGlhc2VzIGZyb20gImFubm90YXRpb25zIgogICAgc3RhdGljIGZ1bmMgZXh0cmFjdFR5cGVhbGlhc2VzKGZyb20gYW5ub3RhdGVkOiBTb3VyY2VyeVJ1bnRpbWUuQW5ub3RhdGVkKSAtPiBbU3RyaW5nXSB7CiAgICAgICAgaWYgbGV0IHR5cGVzID0gYW5ub3RhdGVkLmFubm90YXRpb25zWyJ0eXBlYWxpYXMiXSBhcz8gW1N0cmluZ10gewogICAgICAgICAgICByZXR1cm4gdHlwZXMucmV2ZXJzZWQoKQogICAgICAgIH0gZWxzZSBpZiBsZXQgdHlwZSA9IGFubm90YXRlZC5hbm5vdGF0aW9uc1sidHlwZWFsaWFzIl0gYXM/IFN0cmluZyB7CiAgICAgICAgICAgIHJldHVybiBbdHlwZV0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICB9CiAgICB9CiAgICBzdGF0aWMgZnVuYyBleHRyYWN0R2VuZXJpY3NMaXN0KF8gYXNzb2NpYXRlZFR5cGVzOiBbU3RyaW5nXT8pIC0+IFtTdHJpbmddIHsKICAgICAgICByZXR1cm4gYXNzb2NpYXRlZFR5cGVzPy5mbGF0TWFwIHsKICAgICAgICAgICAgc3BsaXQoJDAsIGJ5Rmlyc3RPY2N1cmVuY2VPZjogIiB3aGVyZSAiKS4wLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiICIsIHdpdGg6ICIiKS5jaGFyYWN0ZXJzLnNwbGl0KHNlcGFyYXRvcjogIjoiKS5tYXAoU3RyaW5nLmluaXQpLmZpcnN0CiAgICAgICAgfS5tYXAgeyAiXCgkMCkiIH0gPz8gW10KICAgIH0KICAgIHN0YXRpYyBmdW5jIGV4dHJhY3RHZW5lcmljVHlwZXNNb2RpZmllcihfIGFzc29jaWF0ZWRUeXBlczogW1N0cmluZ10/KSAtPiBTdHJpbmcgewogICAgICAgIGxldCBhbGwgPSBleHRyYWN0R2VuZXJpY3NMaXN0KGFzc29jaWF0ZWRUeXBlcykKICAgICAgICBndWFyZCAhYWxsLmlzRW1wdHkgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgcmV0dXJuICI8XChhbGwuam9pbmVkKHNlcGFyYXRvcjogIiwiKSk+IgogICAgfQogICAgc3RhdGljIGZ1bmMgZXh0cmFjdEdlbmVyaWNUeXBlc0NvbnN0cmFpbnRzKF8gYXNzb2NpYXRlZFR5cGVzOiBbU3RyaW5nXT8pIC0+IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgbGV0IGFsbCA9IGFzc29jaWF0ZWRUeXBlcyBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBsZXQgY29uc3RyYWludHMgPSBhbGwuZmxhdE1hcCB7IHQgLT4gU3RyaW5nPyBpbgogICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSBzcGxpdCh0LCBieUZpcnN0T2NjdXJlbmNlT2Y6ICIgd2hlcmUgIikKICAgICAgICAgICAgbGV0IGNvbnN0cmFpbnQgPSBzcGxpdHRlZC4wLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiICIsIHdpdGg6ICIiKS5jaGFyYWN0ZXJzLnNwbGl0KHNlcGFyYXRvcjogIjoiKS5tYXAoU3RyaW5nLmluaXQpCiAgICAgICAgICAgIGd1YXJkIGNvbnN0cmFpbnQuY291bnQgPT0gMiBlbHNlIHsgcmV0dXJuIG5pbCB9CiAgICAgICAgICAgIGxldCBhZG9wdHMgPSBjb25zdHJhaW50WzFdLmNoYXJhY3RlcnMuc3BsaXQoc2VwYXJhdG9yOiAiLCIpLm1hcChTdHJpbmcuaW5pdCkKICAgICAgICAgICAgdmFyIG1hcHBlZCA9IGFkb3B0cy5tYXAgeyAiXChjb25zdHJhaW50WzBdKTogXCgkMCkiIH0KICAgICAgICAgICAgaWYgIXNwbGl0dGVkLjEuaXNFbXB0eSB7CiAgICAgICAgICAgICAgICBtYXBwZWQuYXBwZW5kKHNwbGl0dGVkLjEpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG1hcHBlZC5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgICAgICAgICB9CiAgICAgICAgICAgIC5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgICAgIGd1YXJkICFjb25zdHJhaW50cy5pc0VtcHR5IGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIHJldHVybiAiIHdoZXJlIFwoY29uc3RyYWludHMpIgogICAgfQp9CmNsYXNzIFBhcmFtZXRlcldyYXBwZXIgewogICAgbGV0IHBhcmFtZXRlcjogTWV0aG9kUGFyYW1ldGVyCgogICAgdmFyIHdyYXBwZWRGb3JDYWxsOiBTdHJpbmcgewogICAgICAgIGxldCB0eXBlU3RyaW5nID0gIlwodHlwZS5hY3R1YWxUeXBlTmFtZSA/PyB0eXBlKSIKICAgICAgICBsZXQgaXNFc2NhcGluZyA9IHR5cGVTdHJpbmcuY29udGFpbnMoIkBlc2NhcGluZyIpCiAgICAgICAgbGV0IGlzT3B0aW9uYWwgPSAodHlwZS5hY3R1YWxUeXBlTmFtZSA/PyB0eXBlKS5pc09wdGlvbmFsCiAgICAgICAgaWYgcGFyYW1ldGVyLmlzQ2xvc3VyZSAmJiAhaXNFc2NhcGluZyAmJiAhaXNPcHRpb25hbCB7CiAgICAgICAgICAgIHJldHVybiAiXChuZXN0ZWRUeXBlKS5hbnkiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKG5lc3RlZFR5cGUpLnZhbHVlKFwoZXNjYXBlZE5hbWUpKSIKICAgICAgICB9CiAgICB9CiAgICB2YXIgd3JhcHBlZFR5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJQYXJhbWV0ZXI8XChUeXBlV3JhcHBlcih0eXBlKS5zdHJpcHBlZCk+IgogICAgfQogICAgdmFyIG5lc3RlZFR5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJcKFR5cGVXcmFwcGVyKHR5cGUpLm5lc3RlZFBhcmFtZXRlcikiCiAgICB9CiAgICB2YXIganVzdFR5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJcKFR5cGVXcmFwcGVyKHR5cGUpLnJlcGxhY2luZ1NlbGYoKSkiCiAgICB9CiAgICB2YXIganVzdFBlcmZvcm1UeXBlOiBTdHJpbmcgewogICAgICAgIHJldHVybiAiXChUeXBlV3JhcHBlcih0eXBlKS5yZXBsYWNpbmdTZWxmKCkpIi5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiEiLCB3aXRoOiAiPyIpCiAgICB9CiAgICB2YXIgZ2VuZXJpY1R5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJQYXJhbWV0ZXI8R2VuZXJpY0F0dHJpYnV0ZT4iCiAgICB9CiAgICB2YXIgdHlwZTogU291cmNlcnlSdW50aW1lLlR5cGVOYW1lIHsKICAgICAgICByZXR1cm4gcGFyYW1ldGVyLnR5cGVOYW1lCiAgICB9CiAgICB2YXIgbmFtZTogU3RyaW5nIHsKICAgICAgICByZXR1cm4gcGFyYW1ldGVyLm5hbWUKICAgIH0KICAgIHZhciBlc2NhcGVkTmFtZTogU3RyaW5nIHsKICAgICAgICByZXR1cm4gImBcKHBhcmFtZXRlci5uYW1lKWAiCiAgICB9CiAgICB2YXIgY29tcGFyYXRvcjogU3RyaW5nIHsKICAgICAgICByZXR1cm4gImd1YXJkIFBhcmFtZXRlci5jb21wYXJlKGxoczogbGhzXChwYXJhbWV0ZXIubmFtZS5jYXBpdGFsaXplZCksIHJoczogcmhzXChwYXJhbWV0ZXIubmFtZS5jYXBpdGFsaXplZCksIHdpdGg6IG1hdGNoZXIpIGVsc2UgeyByZXR1cm4gZmFsc2UgfSIKICAgIH0KCiAgICBpbml0KF8gcGFyYW1ldGVyOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyKSB7CiAgICAgICAgc2VsZi5wYXJhbWV0ZXIgPSBwYXJhbWV0ZXIKICAgIH0KCiAgICBmdW5jIGlzR2VuZXJpYyhfIHR5cGVzOiBbU3RyaW5nXSkgLT4gQm9vbCB7CiAgICAgICAgcmV0dXJuIFR5cGVXcmFwcGVyKHR5cGUpLmlzR2VuZXJpYyh0eXBlcykKICAgIH0KCiAgICBmdW5jIHdyYXBwZWRGb3JQcm94eShfIGdlbmVyaWNzOiBbU3RyaW5nXSkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gaXNHZW5lcmljKGdlbmVyaWNzKSA/ICJcKGVzY2FwZWROYW1lKS53cmFwQXNHZW5lcmljKCkiIDogIlwoZXNjYXBlZE5hbWUpIgogICAgfQogICAgZnVuYyB3cmFwcGVkRm9yQ2FsbHMoXyBnZW5lcmljczogW1N0cmluZ10pIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIGlzR2VuZXJpYyhnZW5lcmljcykgPyAiXCh3cmFwcGVkRm9yQ2FsbCkud3JhcEFzR2VuZXJpYygpIiA6ICJcKHdyYXBwZWRGb3JDYWxsKSIKICAgIH0KCiAgICBmdW5jIGFzTWV0aG9kQXJndW1lbnQoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiXChwYXJhbWV0ZXIuYXJndW1lbnRMYWJlbCA/PyAiXyIpIFwocGFyYW1ldGVyLm5hbWUpOiBcKHBhcmFtZXRlci50eXBlTmFtZSkiCiAgICB9CiAgICBmdW5jIGxhYmVsQW5kTmFtZSgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGxhYmVsID0gcGFyYW1ldGVyLmFyZ3VtZW50TGFiZWwgPz8gIl8iCiAgICAgICAgcmV0dXJuIGxhYmVsICE9ICJcKHBhcmFtZXRlci5uYW1lKSIgPyAiXChsYWJlbCkgXChwYXJhbWV0ZXIubmFtZSkiIDogbGFiZWwKICAgIH0KICAgIGZ1bmMgc2FuaXRpemVkRm9yRW51bUNhc2VOYW1lKCkgLT4gU3RyaW5nIHsKICAgICAgICBpZiBsZXQgbGFiZWwgPSBwYXJhbWV0ZXIuYXJndW1lbnRMYWJlbCB7CiAgICAgICAgICAgIHJldHVybiAiXChsYWJlbClfXChwYXJhbWV0ZXIubmFtZSkiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChwYXJhbWV0ZXIubmFtZSkiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKQogICAgICAgIH0KICAgIH0KfQpjbGFzcyBUeXBlV3JhcHBlciB7CiAgICBsZXQgdHlwZTogU291cmNlcnlSdW50aW1lLlR5cGVOYW1lCgogICAgdmFyIHVud3JhcHBlZDogU3RyaW5nIHsKICAgICAgICByZXR1cm4gdHlwZS51bndyYXBwZWRUeXBlTmFtZQogICAgfQogICAgdmFyIHVud3JhcHBlZFJlcGxhY2luZ1NlbGY6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHJlcGxhY2luZ1NlbGYodW53cmFwOiB0cnVlKQogICAgfQogICAgdmFyIHN0cmlwcGVkOiBTdHJpbmcgewogICAgICAgIGlmIHR5cGUuaXNJbXBsaWNpdGx5VW53cmFwcGVkT3B0aW9uYWwgewogICAgICAgICAgICByZXR1cm4gdHlwZS5pc0Nsb3N1cmUgPyAiKFwodW53cmFwcGVkUmVwbGFjaW5nU2VsZikpPyIgOiAiXCh1bndyYXBwZWRSZXBsYWNpbmdTZWxmKT8iCiAgICAgICAgfSBlbHNlIGlmIHR5cGUuaXNPcHRpb25hbCB7CiAgICAgICAgICAgIHJldHVybiB0eXBlLmlzQ2xvc3VyZSA/ICIoXCh1bndyYXBwZWRSZXBsYWNpbmdTZWxmKSk/IiA6ICJcKHVud3JhcHBlZFJlcGxhY2luZ1NlbGYpPyIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gdW53cmFwcGVkUmVwbGFjaW5nU2VsZgogICAgICAgIH0KICAgIH0KICAgIHZhciBuZXN0ZWRQYXJhbWV0ZXI6IFN0cmluZyB7CiAgICAgICAgaWYgdHlwZS5pc0ltcGxpY2l0bHlVbndyYXBwZWRPcHRpb25hbCB7CiAgICAgICAgICAgIHJldHVybiAiUGFyYW1ldGVyPCIgKyAodHlwZS5pc0Nsb3N1cmUgPyAiKFwodW53cmFwcGVkUmVwbGFjaW5nU2VsZikpPyIgOiAiXCh1bndyYXBwZWRSZXBsYWNpbmdTZWxmKT8iKSArICI+IgogICAgICAgIH0gZWxzZSBpZiB0eXBlLmlzT3B0aW9uYWwgewogICAgICAgICAgICByZXR1cm4gIlBhcmFtZXRlcjwiICsgKHR5cGUuaXNDbG9zdXJlID8gIihcKHVud3JhcHBlZFJlcGxhY2luZ1NlbGYpKT8iIDogIlwodW53cmFwcGVkUmVwbGFjaW5nU2VsZik/IikgKyAiPiIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIlBhcmFtZXRlcjxcKHVud3JhcHBlZFJlcGxhY2luZ1NlbGYpPiIKICAgICAgICB9CiAgICB9CiAgICB2YXIgaXNTZWxmVHlwZTogQm9vbCB7CiAgICAgICAgcmV0dXJuIHVud3JhcHBlZCA9PSAiU2VsZiIKICAgIH0KICAgIGZ1bmMgaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIC0+IEJvb2wgewogICAgICAgIGlmIGxldCB0dXBsZSA9IHR5cGUudHVwbGUgewogICAgICAgICAgICBmb3IgZWxlbWVudCBpbiB0dXBsZS5lbGVtZW50cyB7CiAgICAgICAgICAgICAgICBndWFyZCAhVHlwZVdyYXBwZXIoZWxlbWVudC50eXBlTmFtZSkuaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIGVsc2UgeyByZXR1cm4gdHJ1ZSB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgbGV0IGFycmF5ID0gdHlwZS5hcnJheSB7CiAgICAgICAgICAgIHJldHVybiBUeXBlV3JhcHBlcihhcnJheS5lbGVtZW50VHlwZU5hbWUpLmlzU2VsZlR5cGVSZWN1cnNpdmUoKQogICAgICAgIH0gZWxzZSBpZiBsZXQgZGljdGlvbmFyeSA9IHR5cGUuZGljdGlvbmFyeSB7CiAgICAgICAgICAgIGd1YXJkICFUeXBlV3JhcHBlcihkaWN0aW9uYXJ5LnZhbHVlVHlwZU5hbWUpLmlzU2VsZlR5cGVSZWN1cnNpdmUoKSBlbHNlIHsgcmV0dXJuIHRydWUgfQogICAgICAgICAgICBndWFyZCAhVHlwZVdyYXBwZXIoZGljdGlvbmFyeS5rZXlUeXBlTmFtZSkuaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIGVsc2UgeyByZXR1cm4gdHJ1ZSB9CiAgICAgICAgfSBlbHNlIGlmIGxldCBjbG9zdXJlID0gdHlwZS5jbG9zdXJlIHsKICAgICAgICAgICAgZ3VhcmQgIVR5cGVXcmFwcGVyKGNsb3N1cmUuYWN0dWFsUmV0dXJuVHlwZU5hbWUpLmlzU2VsZlR5cGVSZWN1cnNpdmUoKSBlbHNlIHsgcmV0dXJuIHRydWUgfQogICAgICAgICAgICBmb3IgcGFyYW1ldGVyIGluIGNsb3N1cmUucGFyYW1ldGVycyB7CiAgICAgICAgICAgICAgICBndWFyZCAhVHlwZVdyYXBwZXIocGFyYW1ldGVyLnR5cGVOYW1lKS5pc1NlbGZUeXBlUmVjdXJzaXZlKCkgZWxzZSB7IHJldHVybiB0cnVlIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGlzU2VsZlR5cGUKICAgIH0KCiAgICBpbml0KF8gdHlwZTogU291cmNlcnlSdW50aW1lLlR5cGVOYW1lKSB7CiAgICAgICAgc2VsZi50eXBlID0gdHlwZQogICAgfQoKICAgIGZ1bmMgaXNHZW5lcmljKF8gdHlwZXM6IFtTdHJpbmddKSAtPiBCb29sIHsKICAgICAgICBndWFyZCAhdHlwZS5pc1ZvaWQgZWxzZSB7IHJldHVybiBmYWxzZSB9CgogICAgICAgIHJldHVybiBpc0dlbmVyaWMobmFtZTogdW53cmFwcGVkLCBnZW5lcmljczogdHlwZXMpCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIGlzR2VuZXJpYyhuYW1lOiBTdHJpbmcsIGdlbmVyaWNzOiBbU3RyaW5nXSkgLT4gQm9vbCB7CiAgICAgICAgbGV0IG5hbWUgPSAiKFwobmFtZS5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiAiLCB3aXRoOiAiIikpKSIKICAgICAgICBsZXQgbW9kaWZpZXJzID0gIltcXD9cXCFdKiIKICAgICAgICByZXR1cm4gZ2VuZXJpY3MuY29udGFpbnMod2hlcmU6IHsgZ2VuZXJpYyBpbgogICAgICAgICAgICBsZXQgd3JhcHBlZCA9ICIoW1xcKF1cKGdlbmVyaWMpXChtb2RpZmllcnMpW1xcKVxcLl0pIgogICAgICAgICAgICBsZXQgY29uc3RyYWludCA9ICIoWzwsXVwoZ2VuZXJpYylcKG1vZGlmaWVycylbPixcXC5dKSIKICAgICAgICAgICAgbGV0IGFycmF5cyA9ICIoW1xcWzpdXChnZW5lcmljKVwobW9kaWZpZXJzKVtcXF0sXFwuOl0pIgogICAgICAgICAgICBsZXQgdHVwbGVzID0gIihbXFwoLF1cKGdlbmVyaWMpXChtb2RpZmllcnMpWyxcXC5cXCldKSIKICAgICAgICAgICAgbGV0IGNsb3N1cmVzID0gIigoXFwtXFw+KVwoZ2VuZXJpYylcKG1vZGlmaWVycylbLFxcLlxcKV0pIgogICAgICAgICAgICBsZXQgcGF0dGVybiA9ICJcKHdyYXBwZWQpfFwoY29uc3RyYWludCl8XChhcnJheXMpfFwodHVwbGVzKXxcKGNsb3N1cmVzKSIKICAgICAgICAgICAgZ3VhcmQgbGV0IHJlZ2V4ID0gdHJ5PyBOU1JlZ3VsYXJFeHByZXNzaW9uKHBhdHRlcm46IHBhdHRlcm4pIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgICAgICByZXR1cm4gcmVnZXguZmlyc3RNYXRjaChpbjogbmFtZSwgb3B0aW9uczogW10sIHJhbmdlOiBOU1JhbmdlKGxvY2F0aW9uOiAwLCBsZW5ndGg6IChuYW1lIGFzIE5TU3RyaW5nKS5sZW5ndGgpKSAhPSBuaWwKICAgICAgICB9KQogICAgfQoKICAgIGZ1bmMgcmVwbGFjaW5nU2VsZih1bndyYXA6IEJvb2wgPSBmYWxzZSkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCBpc1NlbGZUeXBlUmVjdXJzaXZlKCkgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB1bndyYXAgPyBzZWxmLnVud3JhcHBlZCA6ICJcKHR5cGUpIgogICAgICAgIH0KCiAgICAgICAgaWYgaXNTZWxmVHlwZSB7CiAgICAgICAgICAgIGxldCBvcHRpb25hbGl0eTogU3RyaW5nID0gewogICAgICAgICAgICAgICAgaWYgdHlwZS5pc0ltcGxpY2l0bHlVbndyYXBwZWRPcHRpb25hbCB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIhIgogICAgICAgICAgICAgICAgfSBlbHNlIGlmIHR5cGUuaXNPcHRpb25hbCB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI/IgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSgpCiAgICAgICAgICAgIHJldHVybiB1bndyYXAgPyBDdXJyZW50LnNlbGZUeXBlIDogQ3VycmVudC5zZWxmVHlwZSArIG9wdGlvbmFsaXR5CiAgICAgICAgfSBlbHNlIGlmIGxldCB0dXBsZSA9IHR5cGUudHVwbGUgewogICAgICAgICAgICBsZXQgaW5uZXIgPSB0dXBsZS5lbGVtZW50cy5tYXAoeyBUeXBlV3JhcHBlcigkMC50eXBlTmFtZSkucmVwbGFjaW5nU2VsZigpIH0pLmpvaW5lZChzZXBhcmF0b3I6ICIsIikKICAgICAgICAgICAgbGV0IHZhbHVlID0gIihcKGlubmVyKSkiCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIH0gZWxzZSBpZiBsZXQgYXJyYXkgPSB0eXBlLmFycmF5IHsKICAgICAgICAgICAgbGV0IHZhbHVlID0gIltcKFR5cGVXcmFwcGVyKGFycmF5LmVsZW1lbnRUeXBlTmFtZSkucmVwbGFjaW5nU2VsZigpKV0iCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIH0gZWxzZSBpZiBsZXQgZGljdGlvbmFyeSA9IHR5cGUuZGljdGlvbmFyeSB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICJbIiArCiAgICAgICAgICAgICAgICAiXChUeXBlV3JhcHBlcihkaWN0aW9uYXJ5LnZhbHVlVHlwZU5hbWUpLnJlcGxhY2luZ1NlbGYoKSkiCiAgICAgICAgICAgICAgICArICI6IiArCiAgICAgICAgICAgICAgICAiXChUeXBlV3JhcHBlcihkaWN0aW9uYXJ5LmtleVR5cGVOYW1lKS5yZXBsYWNpbmdTZWxmKCkpIgogICAgICAgICAgICAgICAgKyAiXSIKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgfSBlbHNlIGlmIGxldCBjbG9zdXJlID0gdHlwZS5jbG9zdXJlIHsKICAgICAgICAgICAgbGV0IHJldHVyblR5cGUgPSBUeXBlV3JhcHBlcihjbG9zdXJlLmFjdHVhbFJldHVyblR5cGVOYW1lKS5yZXBsYWNpbmdTZWxmKCkKICAgICAgICAgICAgbGV0IGlubmVyID0gY2xvc3VyZS5wYXJhbWV0ZXJzLm1hcCh7IFR5cGVXcmFwcGVyKCQwLnR5cGVOYW1lKS5yZXBsYWNpbmdTZWxmKCkgfSkuam9pbmVkKHNlcGFyYXRvcjogIiwiKQogICAgICAgICAgICBsZXQgdGhyb3dpbmcgPSBjbG9zdXJlLnRocm93cyA/ICJ0aHJvd3MgIiA6ICIiCiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICIoXChpbm5lcikpIFwodGhyb3dpbmcpLT4gXChyZXR1cm5UeXBlKSIKICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICh1bndyYXAgPyBzZWxmLnVud3JhcHBlZCA6ICJcKHR5cGUpIikKICAgICAgICB9CiAgICB9Cn0KZnVuYyByZXBsYWNpbmdTZWxmKF8gdmFsdWU6IFN0cmluZykgLT4gU3RyaW5nIHsKICAgIHJldHVybiB2YWx1ZQogICAgICAgIC8vIFRPRE86IHByb3BlciByZWdleCBoZXJlCiAgICAgICAgLy8gZGVmYXVsdCA8IGNhc2UgPgogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIjxTZWxmPiIsIHdpdGg6ICI8XChDdXJyZW50LnNlbGZUeXBlKT4iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIjxTZWxmICIsIHdpdGg6ICI8XChDdXJyZW50LnNlbGZUeXBlKSAiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIjxTZWxmLiIsIHdpdGg6ICI8XChDdXJyZW50LnNlbGZUeXBlKS4iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIjxTZWxmLCIsIHdpdGg6ICI8XChDdXJyZW50LnNlbGZUeXBlKSwiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIjxTZWxmPyIsIHdpdGg6ICI8XChDdXJyZW50LnNlbGZUeXBlKT8iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmPiIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKT4iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIixTZWxmPiIsIHdpdGg6ICIsXChDdXJyZW50LnNlbGZUeXBlKT4iKQogICAgICAgIC8vIChTZWxmKSAtPiBDYXNlCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiKFNlbGYpIiwgd2l0aDogIihcKEN1cnJlbnQuc2VsZlR5cGUpKSIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiKFNlbGYgIiwgd2l0aDogIihcKEN1cnJlbnQuc2VsZlR5cGUpICIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiKFNlbGYuIiwgd2l0aDogIihcKEN1cnJlbnQuc2VsZlR5cGUpLiIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiKFNlbGYsIiwgd2l0aDogIihcKEN1cnJlbnQuc2VsZlR5cGUpLCIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiKFNlbGY/Iiwgd2l0aDogIihcKEN1cnJlbnQuc2VsZlR5cGUpPyIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGYpIiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpKSIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiLFNlbGYpIiwgd2l0aDogIixcKEN1cnJlbnQuc2VsZlR5cGUpKSIpCiAgICAgICAgLy8gbGl0ZXJhbHMKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJbU2VsZl0iLCB3aXRoOiAiW1woQ3VycmVudC5zZWxmVHlwZSldIikKICAgICAgICAvLyByaWdodAogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIltTZWxmICIsIHdpdGg6ICJbXChDdXJyZW50LnNlbGZUeXBlKSAiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIltTZWxmLiIsIHdpdGg6ICJbXChDdXJyZW50LnNlbGZUeXBlKS4iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIltTZWxmLCIsIHdpdGg6ICJbXChDdXJyZW50LnNlbGZUeXBlKSwiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIltTZWxmOiIsIHdpdGg6ICJbXChDdXJyZW50LnNlbGZUeXBlKToiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIltTZWxmPyIsIHdpdGg6ICJbXChDdXJyZW50LnNlbGZUeXBlKT8iKQogICAgICAgIC8vIGxlZnQKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIgU2VsZl0iLCB3aXRoOiAiIFwoQ3VycmVudC5zZWxmVHlwZSldIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIsU2VsZl0iLCB3aXRoOiAiLFwoQ3VycmVudC5zZWxmVHlwZSldIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICI6U2VsZl0iLCB3aXRoOiAiOlwoQ3VycmVudC5zZWxmVHlwZSldIikKICAgICAgICAvLyB1bmtub3duCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGYgIiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpICIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGYuIiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpLiIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGYsIiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpLCIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGY6Iiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpOiIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGY/Iiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpPyIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiLFNlbGYgIiwgd2l0aDogIixcKEN1cnJlbnQuc2VsZlR5cGUpICIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiLFNlbGYsIiwgd2l0aDogIixcKEN1cnJlbnQuc2VsZlR5cGUpLCIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiLFNlbGY/Iiwgd2l0aDogIixcKEN1cnJlbnQuc2VsZlR5cGUpPyIpCn0KCmNsYXNzIE1ldGhvZFdyYXBwZXIgewogICAgcHJpdmF0ZSBmdW5jIGRlcHJlY2F0ZWRNZXNzYWdlKF8gcHJlZmVycmVkOiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gIkBhdmFpbGFibGUoKiwgZGVwcmVjYXRlZCwgbWVzc2FnZTogXCJUaGlzIGNvbnN0cnVjdG9yIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjMuMVwocHJlZmVycmVkKVwiKVxuXHRcdCIKICAgIH0KICAgIHByaXZhdGUgc3RhdGljIHZhciByZWdpc3RlcmVkOiBbU3RyaW5nOiBJbnRdID0gWzpdCiAgICBwcml2YXRlIHN0YXRpYyB2YXIgc3VmZml4ZXM6IFtTdHJpbmc6IEludF0gPSBbOl0KICAgIHByaXZhdGUgc3RhdGljIHZhciBzdWZmaXhlc1dpdGhvdXRSZXR1cm5UeXBlOiBbU3RyaW5nOiBJbnRdID0gWzpdCgogICAgbGV0IG1ldGhvZDogU291cmNlcnlSdW50aW1lLk1ldGhvZAogICAgdmFyIGFjY2Vzc01vZGlmaWVyOiBTdHJpbmcgewogICAgICAgIGd1YXJkICFtZXRob2QuaXNTdGF0aWMgZWxzZSB7IHJldHVybiAicHVibGljIHN0YXRpYyIgfQogICAgICAgIGd1YXJkICFyZXR1cm5zR2VuZXJpY0NvbnN0cmFpbmVkVG9TZWxmIGVsc2UgeyByZXR1cm4gInB1YmxpYyIgfQogICAgICAgIHJldHVybiAib3BlbiIKICAgIH0KCiAgICBwcml2YXRlIHZhciByZWdpc3RyYXRpb25OYW1lOiBTdHJpbmcgewogICAgICAgIHZhciByYXdOYW1lID0gKG1ldGhvZC5pc1N0YXRpYyA/ICJzbSpcKG1ldGhvZC5zZWxlY3Rvck5hbWUpIiA6ICJtKlwobWV0aG9kLnNlbGVjdG9yTmFtZSkiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIl8iLCB3aXRoOiAiIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIoIiwgd2l0aDogIl9fIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIpIiwgd2l0aDogIiIpCgogICAgICAgIHZhciBwYXJhbWV0ZXJzTmFtZXMgPSBtZXRob2QucGFyYW1ldGVycy5tYXAgeyAiXCgkMC5uYW1lKSIgfQoKICAgICAgICB3aGlsZSBsZXQgcmFuZ2UgPSByYXdOYW1lLnJhbmdlKG9mOiAiOiIpLCBsZXQgbmFtZSA9IHBhcmFtZXRlcnNOYW1lcy5maXJzdCB7CiAgICAgICAgICAgIHBhcmFtZXRlcnNOYW1lcy5yZW1vdmVGaXJzdCgpCiAgICAgICAgICAgIHJhd05hbWUucmVwbGFjZVN1YnJhbmdlKHJhbmdlLCB3aXRoOiAiX1wobmFtZSkiKQogICAgICAgIH0KCiAgICAgICAgbGV0IHRyaW1TZXQgPSBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiXyIpCgogICAgICAgIHJldHVybiAgcmF3TmFtZQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIjoiLCB3aXRoOiAiIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJtKiIsIHdpdGg6ICJtXyIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiX19fIiwgd2l0aDogIl9fIikudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiB0cmltU2V0KQogICAgfQogICAgcHJpdmF0ZSB2YXIgdW5pcXVlTmFtZTogU3RyaW5nIHsKICAgICAgICB2YXIgcmF3TmFtZSA9IChtZXRob2QuaXNTdGF0aWMgPyAic21fXChtZXRob2Quc2VsZWN0b3JOYW1lKSIgOiAibV9cKG1ldGhvZC5zZWxlY3Rvck5hbWUpIikKICAgICAgICB2YXIgcGFyYW1ldGVyc05hbWVzID0gbWV0aG9kLnBhcmFtZXRlcnMubWFwIHsgIlwoJDAubmFtZSlfb2ZfXCgkMC50eXBlTmFtZS5uYW1lKSIgfQoKICAgICAgICB3aGlsZSBsZXQgcmFuZ2UgPSByYXdOYW1lLnJhbmdlKG9mOiAiOiIpLCBsZXQgbmFtZSA9IHBhcmFtZXRlcnNOYW1lcy5maXJzdCB7CiAgICAgICAgICAgIHBhcmFtZXRlcnNOYW1lcy5yZW1vdmVGaXJzdCgpCiAgICAgICAgICAgIHJhd05hbWUucmVwbGFjZVN1YnJhbmdlKHJhbmdlLCB3aXRoOiAiX1wobmFtZSkiKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJhd05hbWUudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiXyIpKQogICAgfQogICAgcHJpdmF0ZSB2YXIgdW5pcXVlTmFtZVdpdGhSZXR1cm5UeXBlOiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwobWV0aG9kLnJldHVyblR5cGVOYW1lKSIKICAgICAgICB2YXIgcmV0dXJuVHlwZVN0cmlwcGVkOiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGd1YXJkIGxldCByYW5nZSA9IHJldHVyblR5cGVSYXcucmFuZ2Uob2Y6ICJ3aGVyZSIpIGVsc2UgeyByZXR1cm4gcmV0dXJuVHlwZVJhdyB9CiAgICAgICAgICAgIHZhciBzdHJpcHBlZCA9IHJldHVyblR5cGVSYXcKICAgICAgICAgICAgc3RyaXBwZWQucmVtb3ZlU3VicmFuZ2UoKHJhbmdlLmxvd2VyQm91bmQpLi4uKQogICAgICAgICAgICByZXR1cm4gc3RyaXBwZWQKICAgICAgICB9KCkKICAgICAgICByZXR1cm5UeXBlU3RyaXBwZWQgPSByZXR1cm5UeXBlU3RyaXBwZWQudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiICIpKQogICAgICAgIHJldHVybiAiXCh1bmlxdWVOYW1lKS0+XChyZXR1cm5UeXBlU3RyaXBwZWQpIgogICAgfQogICAgcHJpdmF0ZSB2YXIgbmFtZVN1ZmZpeDogU3RyaW5nIHsKICAgICAgICBndWFyZCBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnJlZ2lzdGVyZWRbcmVnaXN0cmF0aW9uTmFtZV0gZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgZ3VhcmQgY291bnQgPiAxIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGd1YXJkIGxldCBpbmRleCA9IE1ldGhvZFdyYXBwZXIuc3VmZml4ZXNbdW5pcXVlTmFtZVdpdGhSZXR1cm5UeXBlXSBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICByZXR1cm4gIl9cKGluZGV4KSIKICAgIH0KCiAgICB2YXIgcHJvdG90eXBlOiBTdHJpbmcgewogICAgICAgIHJldHVybiAiXChyZWdpc3RyYXRpb25OYW1lKVwobmFtZVN1ZmZpeCkiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKQogICAgfQogICAgdmFyIHBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJXcmFwcGVyXSB7CiAgICAgICAgcmV0dXJuIG1ldGhvZC5wYXJhbWV0ZXJzLm1hcCB7IFBhcmFtZXRlcldyYXBwZXIoJDApIH0KICAgIH0KICAgIHZhciBmdW5jdGlvblByb3RvdHlwZTogU3RyaW5nIHsKICAgICAgICBsZXQgdGhyb3dpbmc6IFN0cmluZyA9IHsKICAgICAgICAgICAgaWYgbWV0aG9kLnRocm93cyB7CiAgICAgICAgICAgICAgICByZXR1cm4gInRocm93cyAiCiAgICAgICAgICAgIH0gZWxzZSBpZiBtZXRob2QucmV0aHJvd3MgewogICAgICAgICAgICAgICAgcmV0dXJuICJyZXRocm93cyAiCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICAgICAgfQogICAgICAgIH0oKQoKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXI6IFN0cmluZyA9ICJcKGFjY2Vzc01vZGlmaWVyKSAiCiAgICAgICAgbGV0IHBhcmFtcyA9IHJlcGxhY2luZ1NlbGYocGFyYW1ldGVyc0ZvclN0dWJTaWduYXR1cmUoKSkKCiAgICAgICAgaWYgbWV0aG9kLmlzSW5pdGlhbGl6ZXIgewogICAgICAgICAgICByZXR1cm4gInB1YmxpYyByZXF1aXJlZCBcKG1ldGhvZC5uYW1lKSBcKHRocm93aW5nKSIKICAgICAgICB9IGVsc2UgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCB7CiAgICAgICAgICAgIGxldCB3aGVyZVBhcnRJZk5lZWRlZDogU3RyaW5nID0gewogICAgICAgICAgICAgICAgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUuaGFzUHJlZml4KCJWb2lkIikgewogICAgICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lLnJhbmdlKG9mOiAiVm9pZCIpIQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiXChtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZVtyYW5nZS51cHBlckJvdW5kLi4uXSkiCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUuaXNFbXB0eSA/ICJcKG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lKSAiIDogIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSgpCiAgICAgICAgICAgIHJldHVybiAiXChzdGF0aWNNb2RpZmllcilmdW5jIFwobWV0aG9kLnNob3J0TmFtZSlcKHBhcmFtcykgXCh0aHJvd2luZylcKHdoZXJlUGFydElmTmVlZGVkKSIKICAgICAgICB9IGVsc2UgaWYgcmV0dXJuc0dlbmVyaWNDb25zdHJhaW5lZFRvU2VsZiB7CiAgICAgICAgICAgIHJldHVybiAiXChzdGF0aWNNb2RpZmllcilmdW5jIFwobWV0aG9kLnNob3J0TmFtZSlcKHBhcmFtcykgXCh0aHJvd2luZyktPiBcKHJldHVyblR5cGVSZXBsYWNpbmdTZWxmKSAiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKHN0YXRpY01vZGlmaWVyKWZ1bmMgXChtZXRob2Quc2hvcnROYW1lKVwocGFyYW1zKSBcKHRocm93aW5nKS0+IFwobWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUpICIKICAgICAgICB9CiAgICB9CiAgICB2YXIgZXF1YWxDYXNlOiBTdHJpbmcgewogICAgICAgIGd1YXJkICFtZXRob2QuaXNJbml0aWFsaXplciBlbHNlIHsgcmV0dXJuICIiIH0KCiAgICAgICAgaWYgbWV0aG9kLnBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiY2FzZSAoLlwocHJvdG90eXBlKSwgLlwocHJvdG90eXBlKSk6IgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBsaHNQYXJhbXMgPSBtZXRob2QucGFyYW1ldGVycy5tYXAgeyAibGV0IGxoc1woJDAubmFtZS5jYXBpdGFsaXplZCkiIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgICAgICAgICAgbGV0IHJoc1BhcmFtcyA9IG1ldGhvZC5wYXJhbWV0ZXJzLm1hcCB7ICJsZXQgcmhzXCgkMC5uYW1lLmNhcGl0YWxpemVkKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgICAgICAgICByZXR1cm4gImNhc2UgKC5cKHByb3RvdHlwZSkoXChsaHNQYXJhbXMpKSwgLlwocHJvdG90eXBlKShcKHJoc1BhcmFtcykpKToiCiAgICAgICAgfQogICAgfQogICAgdmFyIGludFZhbHVlQ2FzZTogU3RyaW5nIHsKICAgICAgICBpZiBtZXRob2QucGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJjYXNlIC5cKHByb3RvdHlwZSk6IHJldHVybiAwIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBwYXJhbXMgPSBtZXRob2QucGFyYW1ldGVycy5lbnVtZXJhdGVkKCkubWFwIHsgb2Zmc2V0LCBfIGluCiAgICAgICAgICAgICAgICByZXR1cm4gInBcKG9mZnNldCkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGRlZmluaXRpb25zID0gcGFyYW1zLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgICAgIGxldCBwYXJhbXNTdW0gPSBwYXJhbXMubWFwKHsgIlwoJDApLmludFZhbHVlIiB9KS5qb2luZWQoc2VwYXJhdG9yOiAiICsgIikKICAgICAgICAgICAgcmV0dXJuICJjYXNlIGxldCAuXChwcm90b3R5cGUpKFwoZGVmaW5pdGlvbnMpKTogcmV0dXJuIFwocGFyYW1zU3VtKSIKICAgICAgICB9CiAgICB9CgogICAgdmFyIHJldHVybnNTZWxmOiBCb29sIHsKICAgICAgICBndWFyZCAhcmV0dXJuc0dlbmVyaWNDb25zdHJhaW5lZFRvU2VsZiBlbHNlIHsgcmV0dXJuIHRydWUgfQogICAgICAgIHJldHVybiAhbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAmJiBUeXBlV3JhcHBlcihtZXRob2QucmV0dXJuVHlwZU5hbWUpLmlzU2VsZlR5cGUKICAgIH0KICAgIHZhciByZXR1cm5zR2VuZXJpY0NvbnN0cmFpbmVkVG9TZWxmOiBCb29sIHsKICAgICAgICBsZXQgZGVmYXVsdFJldHVyblR5cGUgPSAiXChtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZSkgIgogICAgICAgIHJldHVybiBkZWZhdWx0UmV0dXJuVHlwZSAhPSByZXR1cm5UeXBlUmVwbGFjaW5nU2VsZgogICAgfQogICAgdmFyIHJldHVyblR5cGVSZXBsYWNpbmdTZWxmOiBTdHJpbmcgewogICAgICAgIHJldHVybiByZXBsYWNpbmdTZWxmKCJcKG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lKSAiKQogICAgfQogICAgdmFyIHBhcmFtZXRlcnNDb250YWluc1NlbGY6IEJvb2wgewogICAgICAgIHJldHVybiByZXBsYWNpbmdTZWxmKHBhcmFtZXRlcnNGb3JTdHViU2lnbmF0dXJlKCkpICE9IHBhcmFtZXRlcnNGb3JTdHViU2lnbmF0dXJlKCkKICAgIH0KCiAgICB2YXIgcmVwbGFjZVNlbGY6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIEN1cnJlbnQuc2VsZlR5cGUKICAgIH0KCiAgICBpbml0KF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kKSB7CiAgICAgICAgc2VsZi5tZXRob2QgPSBtZXRob2QKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIGZ1bmMgY2xlYXIoKSAtPiBTdHJpbmcgewogICAgICAgIE1ldGhvZFdyYXBwZXIucmVnaXN0ZXJlZCA9IFs6XQogICAgICAgIE1ldGhvZFdyYXBwZXIuc3VmZml4ZXMgPSBbOl0KICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGUgPSBbOl0KICAgICAgICByZXR1cm4gIiIKICAgIH0KCiAgICBmdW5jIHJlZ2lzdGVyKCkgewogICAgICAgIE1ldGhvZFdyYXBwZXIucmVnaXN0ZXIocmVnaXN0cmF0aW9uTmFtZSx1bmlxdWVOYW1lLHVuaXF1ZU5hbWVXaXRoUmV0dXJuVHlwZSkKICAgIH0KCiAgICBzdGF0aWMgZnVuYyByZWdpc3RlcihfIG5hbWU6IFN0cmluZywgXyB1bmlxdWVOYW1lOiBTdHJpbmcsIF8gdW5pcXVlTmFtZVdpdGhSZXR1cm5UeXBlOiBTdHJpbmcpIHsKICAgICAgICBpZiBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnJlZ2lzdGVyZWRbbmFtZV0gewogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnJlZ2lzdGVyZWRbbmFtZV0gPSBjb3VudCArIDEKICAgICAgICAgICAgTWV0aG9kV3JhcHBlci5zdWZmaXhlc1t1bmlxdWVOYW1lV2l0aFJldHVyblR5cGVdID0gY291bnQgKyAxCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgTWV0aG9kV3JhcHBlci5yZWdpc3RlcmVkW25hbWVdID0gMQogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzW3VuaXF1ZU5hbWVXaXRoUmV0dXJuVHlwZV0gPSAxCiAgICAgICAgfQoKICAgICAgICBpZiBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gewogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gPSBjb3VudCArIDEKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gPSAxCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgcmV0dXJuVHlwZU1hdHRlcnMoKSAtPiBCb29sIHsKICAgICAgICBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gPz8gMAogICAgICAgIHJldHVybiBjb3VudCA+IDEKICAgIH0KCiAgICBmdW5jIHdyYXBwZWRJbk1ldGhvZFR5cGUoKSAtPiBCb29sIHsKICAgICAgICByZXR1cm4gIW1ldGhvZC5pc0luaXRpYWxpemVyCiAgICB9CgogICAgZnVuYyByZXR1cm5pbmdQYXJhbWV0ZXIoXyBtdWx0aXBsZTogQm9vbCwgXyBmcm9udDogQm9vbCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCByZXR1cm5UeXBlTWF0dGVycygpIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGxldCByZXR1cm5pbmc6IFN0cmluZyA9ICJyZXR1cm5pbmc6IFwocmV0dXJuVHlwZVN0cmlwcGVkKG1ldGhvZCwgdHlwZTogdHJ1ZSkpIgogICAgICAgIGd1YXJkIG11bHRpcGxlIGVsc2UgeyByZXR1cm4gcmV0dXJuaW5nIH0KCiAgICAgICAgcmV0dXJuIGZyb250ID8gIiwgXChyZXR1cm5pbmcpIiA6ICJcKHJldHVybmluZyksICIKICAgIH0KCiAgICAvLyBTdHViCiAgICBmdW5jIHN0dWJCb2R5KCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCAhbWV0aG9kLmlzSW5pdGlhbGl6ZXIgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgbGV0IGJvZHkgPSBpbnZva2VCb2R5KCkKICAgICAgICByZXR1cm4gcmVwbGFjaW5nU2VsZihib2R5KQogICAgfQoKICAgIC8vIE1ldGhvZCBUeXBlCiAgICBmdW5jIG1ldGhvZFR5cGVEZWNsYXJhdGlvbldpdGhQYXJhbWV0ZXJzKCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCAhbWV0aG9kLnBhcmFtZXRlcnMuaXNFbXB0eSBlbHNlIHsgcmV0dXJuICJcKHByb3RvdHlwZSkiIH0KICAgICAgICByZXR1cm4gIlwocHJvdG90eXBlKShcKHBhcmFtZXRlcnNGb3JNZXRob2RUeXBlRGVjbGFyYXRpb24oKSkpIgogICAgfQoKICAgIC8vIEdpdmVuCiAgICBmdW5jIGNvbnRhaW5zRW1wdHlBcmd1bWVudExhYmVscygpIC0+IEJvb2wgewogICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLmNvbnRhaW5zKHdoZXJlOiB7ICQwLnBhcmFtZXRlci5hcmd1bWVudExhYmVsID09IG5pbCB9KQogICAgfQoKICAgIGZ1bmMgZ2l2ZW5SZXR1cm5UeXBlU3RyaW5nKCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZzogU3RyaW5nID0gewogICAgICAgICAgICBndWFyZCAhcmV0dXJuc0dlbmVyaWNDb25zdHJhaW5lZFRvU2VsZiBlbHNlIHsgcmV0dXJuIHJldHVyblR5cGVSZXBsYWNpbmdTZWxmIH0KICAgICAgICAgICAgZ3VhcmQgIXJldHVybnNTZWxmIGVsc2UgeyByZXR1cm4gcmVwbGFjZVNlbGYgfQogICAgICAgICAgICByZXR1cm4gVHlwZVdyYXBwZXIobWV0aG9kLnJldHVyblR5cGVOYW1lKS5zdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHJldHVybiByZXR1cm5UeXBlU3RyaW5nCiAgICB9CgogICAgZnVuYyBnaXZlbkNvbnN0cnVjdG9yTmFtZShwcmVmaXg6IFN0cmluZyA9ICIiLCBkZXByZWNhdGVkOiBCb29sID0gZmFsc2UsIGFubm90YXRlZDogQm9vbCA9IHRydWUpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVTdHJpbmcgPSBnaXZlblJldHVyblR5cGVTdHJpbmcoKQogICAgICAgIGxldCAoYW5ub3RhdGlvbiwgXywgXykgPSBtZXRob2RJbmZvKGRlcHJlY2F0ZWQsIGFubm90YXRlZCkKICAgICAgICBsZXQgY2xhdXNlQ29uc3RyYWludHMgPSB3aGVyZUNsYXVzZUV4cHJlc3Npb24oKQoKICAgICAgICBpZiBtZXRob2QucGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJwdWJsaWMgc3RhdGljIGZ1bmMgXChtZXRob2Quc2hvcnROYW1lKSh3aWxsUmV0dXJuOiBcKHJldHVyblR5cGVTdHJpbmcpLi4uKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKGFubm90YXRpb24pcHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kLnNob3J0TmFtZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoZGVwcmVjYXRlZDogZGVwcmVjYXRlZCkpLCB3aWxsUmV0dXJuOiBcKHJldHVyblR5cGVTdHJpbmcpLi4uKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3Rvck5hbWVUaHJvd3MocHJlZml4OiBTdHJpbmcgPSAiIiwgZGVwcmVjYXRlZDogQm9vbCA9IGZhbHNlLCBhbm5vdGF0ZWQ6IEJvb2wgPSB0cnVlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCAoYW5ub3RhdGlvbiwgXywgXykgPSBtZXRob2RJbmZvKGRlcHJlY2F0ZWQsIGFubm90YXRlZCkKICAgICAgICBsZXQgY2xhdXNlQ29uc3RyYWludHMgPSB3aGVyZUNsYXVzZUV4cHJlc3Npb24oKQogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKHdpbGxUaHJvdzogRXJyb3IuLi4pIC0+IFwocHJlZml4KU1ldGhvZFN0dWIiICsgY2xhdXNlQ29uc3RyYWludHMKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIlwoYW5ub3RhdGlvbilwdWJsaWMgc3RhdGljIGZ1bmMgXChtZXRob2Quc2hvcnROYW1lKShcKHBhcmFtZXRlcnNGb3JQcm94eVNpZ25hdHVyZShkZXByZWNhdGVkOiBkZXByZWNhdGVkKSksIHdpbGxUaHJvdzogRXJyb3IuLi4pIC0+IFwocHJlZml4KU1ldGhvZFN0dWIiICsgY2xhdXNlQ29uc3RyYWludHMKICAgICAgICB9CiAgICB9CgogICAgZnVuYyBnaXZlbkNvbnN0cnVjdG9yKHByZWZpeDogU3RyaW5nID0gIiIpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgbWV0aG9kLnBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAicmV0dXJuIFwocHJlZml4KUdpdmVuKG1ldGhvZDogLlwocHJvdG90eXBlKSwgcHJvZHVjdHM6IHdpbGxSZXR1cm4ubWFwKHsgU3R1YlByb2R1Y3QucmV0dXJuKCQwIGFzIEFueSkgfSkpIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAicmV0dXJuIFwocHJlZml4KUdpdmVuKG1ldGhvZDogLlwocHJvdG90eXBlKShcKHBhcmFtZXRlcnNGb3JQcm94eUluaXQoKSkpLCBwcm9kdWN0czogd2lsbFJldHVybi5tYXAoeyBTdHViUHJvZHVjdC5yZXR1cm4oJDAgYXMgQW55KSB9KSkiCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3RvclRocm93cyhwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClHaXZlbihtZXRob2Q6IC5cKHByb3RvdHlwZSksIHByb2R1Y3RzOiB3aWxsVGhyb3cubWFwKHsgU3R1YlByb2R1Y3QudGhyb3coJDApIH0pKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClHaXZlbihtZXRob2Q6IC5cKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlJbml0KCkpKSwgcHJvZHVjdHM6IHdpbGxUaHJvdy5tYXAoeyBTdHViUHJvZHVjdC50aHJvdygkMCkgfSkpIgogICAgICAgIH0KICAgIH0KCiAgICAvLyBHaXZlbiB3aWxsUHJvZHVjZQogICAgZnVuYyBnaXZlblByb2R1Y2VDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZyA9IGdpdmVuUmV0dXJuVHlwZVN0cmluZygpCiAgICAgICAgbGV0IHByb2R1Y2VDbG9zdXJlID0gIihTdHViYmVyPFwocmV0dXJuVHlwZVN0cmluZyk+KSAtPiBWb2lkIgogICAgICAgIGxldCBjbGF1c2VDb25zdHJhaW50cyA9IHdoZXJlQ2xhdXNlRXhwcmVzc2lvbigpCgogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKHdpbGxQcm9kdWNlOiBcKHByb2R1Y2VDbG9zdXJlKSkgLT4gXChwcmVmaXgpTWV0aG9kU3R1YiIgKyBjbGF1c2VDb25zdHJhaW50cwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAicHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kLnNob3J0TmFtZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoKSksIHdpbGxQcm9kdWNlOiBcKHByb2R1Y2VDbG9zdXJlKSkgLT4gXChwcmVmaXgpTWV0aG9kU3R1YiIgKyBjbGF1c2VDb25zdHJhaW50cwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIGdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yTmFtZVRocm93cyhwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlU3RyaW5nID0gZ2l2ZW5SZXR1cm5UeXBlU3RyaW5nKCkKICAgICAgICBsZXQgcHJvZHVjZUNsb3N1cmUgPSAiKFN0dWJiZXJUaHJvd3M8XChyZXR1cm5UeXBlU3RyaW5nKT4pIC0+IFZvaWQiCiAgICAgICAgbGV0IGNsYXVzZUNvbnN0cmFpbnRzID0gd2hlcmVDbGF1c2VFeHByZXNzaW9uKCkKCiAgICAgICAgaWYgbWV0aG9kLnBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAicHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kLnNob3J0TmFtZSkod2lsbFByb2R1Y2U6IFwocHJvZHVjZUNsb3N1cmUpKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJwdWJsaWMgc3RhdGljIGZ1bmMgXChtZXRob2Quc2hvcnROYW1lKShcKHBhcmFtZXRlcnNGb3JQcm94eVNpZ25hdHVyZSgpKSwgd2lsbFByb2R1Y2U6IFwocHJvZHVjZUNsb3N1cmUpKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Qcm9kdWNlQ29uc3RydWN0b3IocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZyA9IGdpdmVuUmV0dXJuVHlwZVN0cmluZygpCiAgICAgICAgcmV0dXJuICIiIgogICAgICAgIGxldCB3aWxsUmV0dXJuOiBbXChyZXR1cm5UeXBlU3RyaW5nKV0gPSBbXQogICAgICAgIFx0XHRcdGxldCBnaXZlbjogXChwcmVmaXgpR2l2ZW4gPSB7IFwoZ2l2ZW5Db25zdHJ1Y3RvcihwcmVmaXg6IHByZWZpeCkpIH0oKQogICAgICAgIFx0XHRcdGxldCBzdHViYmVyID0gZ2l2ZW4uc3R1Yihmb3I6IChcKHJldHVyblR5cGVTdHJpbmcpKS5zZWxmKQogICAgICAgIFx0XHRcdHdpbGxQcm9kdWNlKHN0dWJiZXIpCiAgICAgICAgXHRcdFx0cmV0dXJuIGdpdmVuCiAgICAgICAgIiIiCiAgICB9CgogICAgZnVuYyBnaXZlblByb2R1Y2VDb25zdHJ1Y3RvclRocm93cyhwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlU3RyaW5nID0gZ2l2ZW5SZXR1cm5UeXBlU3RyaW5nKCkKICAgICAgICByZXR1cm4gIiIiCiAgICAgICAgbGV0IHdpbGxUaHJvdzogW0Vycm9yXSA9IFtdCiAgICAgICAgXHRcdFx0bGV0IGdpdmVuOiBcKHByZWZpeClHaXZlbiA9IHsgXChnaXZlbkNvbnN0cnVjdG9yVGhyb3dzKHByZWZpeDogcHJlZml4KSkgfSgpCiAgICAgICAgXHRcdFx0bGV0IHN0dWJiZXIgPSBnaXZlbi5zdHViVGhyb3dzKGZvcjogKFwocmV0dXJuVHlwZVN0cmluZykpLnNlbGYpCiAgICAgICAgXHRcdFx0d2lsbFByb2R1Y2Uoc3R1YmJlcikKICAgICAgICBcdFx0XHRyZXR1cm4gZ2l2ZW4KICAgICAgICAiIiIKICAgIH0KCiAgICAvLyBWZXJpZnkKICAgIGZ1bmMgdmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiBTdHJpbmcgPSAiIiwgZGVwcmVjYXRlZDogQm9vbCA9IGZhbHNlLCBhbm5vdGF0ZWQ6IEJvb2wgPSB0cnVlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCAoYW5ub3RhdGlvbiwgbWV0aG9kTmFtZSwgZ2VuZXJpY0NvbnN0cmFpbnMpID0gbWV0aG9kSW5mbyhkZXByZWNhdGVkLCBhbm5vdGF0ZWQpCgogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZE5hbWUpKFwocmV0dXJuaW5nUGFyYW1ldGVyKGZhbHNlLHRydWUpKSkgLT4gXChwcmVmaXgpVmVyaWZ5XChnZW5lcmljQ29uc3RyYWlucykiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKGFubm90YXRpb24pcHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kTmFtZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoZGVwcmVjYXRlZDogZGVwcmVjYXRlZCkpXChyZXR1cm5pbmdQYXJhbWV0ZXIodHJ1ZSx0cnVlKSkpIC0+IFwocHJlZml4KVZlcmlmeVwoZ2VuZXJpY0NvbnN0cmFpbnMpIgogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIHZlcmlmaWNhdGlvblByb3h5Q29uc3RydWN0b3IocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBpZiBtZXRob2QucGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJyZXR1cm4gXChwcmVmaXgpVmVyaWZ5KG1ldGhvZDogLlwocHJvdG90eXBlKSkiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJyZXR1cm4gXChwcmVmaXgpVmVyaWZ5KG1ldGhvZDogLlwocHJvdG90eXBlKShcKHBhcmFtZXRlcnNGb3JQcm94eUluaXQoKSkpKSIKICAgICAgICB9CiAgICB9CgogICAgLy8gUGVyZm9ybQogICAgZnVuYyBwZXJmb3JtUHJveHlDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiBTdHJpbmcgPSAiIiwgZGVwcmVjYXRlZDogQm9vbCA9IGZhbHNlLCBhbm5vdGF0ZWQ6IEJvb2wgPSB0cnVlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBib2R5OiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGxldCAoYW5ub3RhdGlvbiwgbWV0aG9kTmFtZSwgZ2VuZXJpY0NvbnN0cmFpbnMpID0gbWV0aG9kSW5mbyhkZXByZWNhdGVkLCBhbm5vdGF0ZWQpCgogICAgICAgICAgICBpZiBtZXRob2QucGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgICAgIHJldHVybiAicHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kTmFtZSkoXChyZXR1cm5pbmdQYXJhbWV0ZXIodHJ1ZSxmYWxzZSkpcGVyZm9ybTogQGVzY2FwaW5nIFwocGVyZm9ybVByb3h5Q2xvc3VyZVR5cGUoKSkpIC0+IFwocHJlZml4KVBlcmZvcm1cKGdlbmVyaWNDb25zdHJhaW5zKSIKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZE5hbWUpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKGRlcHJlY2F0ZWQ6IGRlcHJlY2F0ZWQpKSwgXChyZXR1cm5pbmdQYXJhbWV0ZXIodHJ1ZSxmYWxzZSkpcGVyZm9ybTogQGVzY2FwaW5nIFwocGVyZm9ybVByb3h5Q2xvc3VyZVR5cGUoKSkpIC0+IFwocHJlZml4KVBlcmZvcm1cKGdlbmVyaWNDb25zdHJhaW5zKSIKICAgICAgICAgICAgfQogICAgICAgIH0oKQogICAgICAgIHJldHVybiByZXBsYWNpbmdTZWxmKGJvZHkpCiAgICB9CgogICAgZnVuYyBwZXJmb3JtUHJveHlDb25zdHJ1Y3RvcihwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClQZXJmb3JtKG1ldGhvZDogLlwocHJvdG90eXBlKSwgcGVyZm9ybXM6IHBlcmZvcm0pIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAicmV0dXJuIFwocHJlZml4KVBlcmZvcm0obWV0aG9kOiAuXChwcm90b3R5cGUpKFwocGFyYW1ldGVyc0ZvclByb3h5SW5pdCgpKSksIHBlcmZvcm1zOiBwZXJmb3JtKSIKICAgICAgICB9CiAgICB9CgogICAgZnVuYyBwZXJmb3JtUHJveHlDbG9zdXJlVHlwZSgpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgbWV0aG9kLnBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiKCkgLT4gVm9pZCIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IHNlbGYucGFyYW1ldGVycwogICAgICAgICAgICAgICAgLm1hcCB7ICJcKCQwLmp1c3RQZXJmb3JtVHlwZSkiIH0KICAgICAgICAgICAgICAgIC5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgICAgICAgICByZXR1cm4gIihcKHBhcmFtZXRlcnMpKSAtPiBWb2lkIgogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIHBlcmZvcm1Qcm94eUNsb3N1cmVDYWxsKCkgLT4gU3RyaW5nIHsKICAgICAgICBpZiBtZXRob2QucGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJwZXJmb3JtPygpIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzID0gbWV0aG9kLnBhcmFtZXRlcnMKICAgICAgICAgICAgICAgIC5tYXAgeyBwIGluCiAgICAgICAgICAgICAgICAgICAgbGV0IHdyYXBwZWQgPSBQYXJhbWV0ZXJXcmFwcGVyKHApCiAgICAgICAgICAgICAgICAgICAgbGV0IGlzQXV0b2xvc3VyZSA9IHdyYXBwZWQuanVzdFR5cGUuaGFzUHJlZml4KCJAYXV0b2Nsb3N1cmUiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiXChwLmlub3V0ID8gIiYiIDogIiIpYFwocC5uYW1lKWBcKGlzQXV0b2xvc3VyZSA/ICIoKSIgOiAiIikiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAuam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgICAgICAgICAgcmV0dXJuICJwZXJmb3JtPyhcKHBhcmFtZXRlcnMpKSIKICAgICAgICB9CiAgICB9CgogICAgZnVuYyBwZXJmb3JtQ2FsbCgpIC0+IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgIW1ldGhvZC5pc0luaXRpYWxpemVyIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGxldCB0eXBlID0gcGVyZm9ybVByb3h5Q2xvc3VyZVR5cGUoKQogICAgICAgIHZhciBwcm94eSA9IG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgPyAiXChwcm90b3R5cGUpIiA6ICJcKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yTWV0aG9kQ2FsbCgpKSkiCgogICAgICAgIGxldCBjYXN0ID0gImxldCBwZXJmb3JtID0gcmVnaXN0cnkubWV0aG9kUGVyZm9ybVZhbHVlKC5cKHByb3h5KSkgYXM/IFwodHlwZSkiCiAgICAgICAgbGV0IGNhbGwgPSBwZXJmb3JtUHJveHlDbG9zdXJlQ2FsbCgpCgogICAgICAgIHJldHVybiAiXG5cdFx0XChjYXN0KVxuXHRcdFwoY2FsbCkiCiAgICB9CgogICAgLy8gSGVscGVycwogICAgcHJpdmF0ZSBmdW5jIHBhcmFtZXRlcnNGb3JNZXRob2RDYWxsKCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgZ2VuZXJpY3MgPSBnZXRHZW5lcmljc1dpdGhvdXRDb25zdHJhaW50cygpCiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMubWFwIHsgJDAud3JhcHBlZEZvckNhbGxzKGdlbmVyaWNzKSB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIHBhcmFtZXRlcnNGb3JNZXRob2RUeXBlRGVjbGFyYXRpb24oKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBnZW5lcmljcyA9IGdldEdlbmVyaWNzV2l0aG91dENvbnN0cmFpbnRzKCkKICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5tYXAgeyBwYXJhbSBpbgogICAgICAgICAgICByZXR1cm4gcGFyYW0uaXNHZW5lcmljKGdlbmVyaWNzKSA/IHBhcmFtLmdlbmVyaWNUeXBlIDogcmVwbGFjaW5nU2VsZihwYXJhbS5uZXN0ZWRUeXBlKQogICAgICAgIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKGRlcHJlY2F0ZWQ6IEJvb2wgPSBmYWxzZSkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5tYXAgeyBwIGluCiAgICAgICAgICAgIGd1YXJkIGRlcHJlY2F0ZWQgZWxzZSB7IHJldHVybiAiXChwLmxhYmVsQW5kTmFtZSgpKTogXChyZXBsYWNpbmdTZWxmKHAubmVzdGVkVHlwZSkpIiB9CiAgICAgICAgICAgIGd1YXJkIGxldCBhcmd1bWVudExhYmVsID0gcC5wYXJhbWV0ZXIuYXJndW1lbnRMYWJlbCBlbHNlIHsgcmV0dXJuICJcKHAucGFyYW1ldGVyLm5hbWUpOiBcKHJlcGxhY2luZ1NlbGYocC5uZXN0ZWRUeXBlKSkiIH0KICAgICAgICAgICAgZ3VhcmQgYXJndW1lbnRMYWJlbCAhPSBwLm5hbWUgZWxzZSB7IHJldHVybiAiXChwLnBhcmFtZXRlci5uYW1lKTogXChyZXBsYWNpbmdTZWxmKHAubmVzdGVkVHlwZSkpIiB9CiAgICAgICAgICAgIHJldHVybiAiXChhcmd1bWVudExhYmVsKSBcKHAucGFyYW1ldGVyLm5hbWUpOiBcKHJlcGxhY2luZ1NlbGYocC5uZXN0ZWRUeXBlKSkiCiAgICAgICAgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBkZXByZWNhdGVkUGFyYW1ldGVyc01lc3NhZ2UoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBuZXdQYXJhbXMgPSBwYXJhbWV0ZXJzLm1hcCB7IHAgaW4gcmV0dXJuICJcKHAucGFyYW1ldGVyLmFyZ3VtZW50TGFiZWwgPz8gIl8iKSIgfQogICAgICAgIGxldCBvbGRQYXJhbXMgPSBwYXJhbWV0ZXJzLm1hcCB7IHAgLT4gU3RyaW5nIGluCiAgICAgICAgICAgIGd1YXJkIGxldCBhcmd1bWVudExhYmVsID0gcC5wYXJhbWV0ZXIuYXJndW1lbnRMYWJlbCBlbHNlIHsgcmV0dXJuICJcKHAucGFyYW1ldGVyLm5hbWUpIiB9CiAgICAgICAgICAgIGd1YXJkIGFyZ3VtZW50TGFiZWwgIT0gcC5uYW1lIGVsc2UgeyByZXR1cm4gIlwocC5wYXJhbWV0ZXIubmFtZSkiIH0KICAgICAgICAgICAgcmV0dXJuICJcKGFyZ3VtZW50TGFiZWwpIgogICAgICAgIH0KCiAgICAgICAgdmFyIG1lc3NhZ2VzOiBbU3RyaW5nXSA9IFtdCiAgICAgICAgZm9yIGkgaW4gMC4uPG5ld1BhcmFtcy5jb3VudCB7CiAgICAgICAgICAgIGlmIG5ld1BhcmFtc1tpXSAhPSBvbGRQYXJhbXNbaV0gewogICAgICAgICAgICAgICAgbWVzc2FnZXMuYXBwZW5kKCIgcmVtb3ZlIGBcKG9sZFBhcmFtc1tpXSlgIGxhYmVsIikKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICIgUG9zc2libGUgZml4OiAiICsgbWVzc2FnZXMuam9pbmVkKHNlcGFyYXRvcjogIiwiKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yU3R1YlNpZ25hdHVyZSgpIC0+IFN0cmluZyB7CiAgICAgICAgZnVuYyByZXBsYWNpbmcoZmlyc3Q6IFN0cmluZywgaW4gZnVsbDogU3RyaW5nLCB3aXRoIG90aGVyOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgICAgIGd1YXJkIGxldCByYW5nZSA9IGZ1bGwucmFuZ2Uob2Y6IGZpcnN0KSBlbHNlIHsgcmV0dXJuIGZ1bGwgfQogICAgICAgICAgICByZXR1cm4gZnVsbC5yZXBsYWNpbmdDaGFyYWN0ZXJzKGluOiByYW5nZSwgd2l0aDogb3RoZXIpCiAgICAgICAgfQogICAgICAgIGxldCBwcmVmaXggPSBtZXRob2Quc2hvcnROYW1lCiAgICAgICAgbGV0IGZ1bGwgPSBtZXRob2QubmFtZQogICAgICAgIGxldCByYW5nZSA9IGZ1bGwucmFuZ2Uob2Y6IHByZWZpeCkhCiAgICAgICAgdmFyIHVucmVmaW5lZCA9ICJcKGZ1bGxbcmFuZ2UudXBwZXJCb3VuZC4uLl0pIgogICAgICAgIHBhcmFtZXRlcnMubWFwIHsgcCAtPiAoU3RyaW5nLFN0cmluZykgaW4KICAgICAgICAgICAgcmV0dXJuICgiXChwLnR5cGUpIiwiXChwLmp1c3RUeXBlKSIpCiAgICAgICAgfS5mb3JFYWNoIHsKICAgICAgICAgICAgdW5yZWZpbmVkID0gcmVwbGFjaW5nKGZpcnN0OiAkMCwgaW46IHVucmVmaW5lZCwgd2l0aDogJDEpCiAgICAgICAgfQogICAgICAgIHJldHVybiB1bnJlZmluZWQKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0ZvclByb3h5SW5pdCgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGdlbmVyaWNzID0gZ2V0R2VuZXJpY3NXaXRob3V0Q29uc3RyYWludHMoKQogICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLm1hcCB7ICJcKCQwLndyYXBwZWRGb3JQcm94eShnZW5lcmljcykpIiB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIGlzR2VuZXJpYygpIC0+IEJvb2wgewogICAgICAgIHJldHVybiBtZXRob2Quc2hvcnROYW1lLmNvbnRhaW5zKCI8IikgJiYgbWV0aG9kLnNob3J0TmFtZS5jb250YWlucygiPiIpCiAgICB9CgogICAgLy8vIFJldHVybnMgbGlzdCBvZiBnZW5lcmljcyB1c2VkIGluIG1ldGhvZCBzaWduYXR1cmUsIHdpdGhvdXQgdGhlaXIgY29uc3RyYWludHMgKGxpa2UgW1QsVSxWXSkKICAgIC8vLwogICAgLy8vIC0gUmV0dXJuczogQXJyYXkgb2Ygc3RyaW5ncywgd2hlcmUgZWFjaCBzdHJpbmdzIHJlcHJlc2VudCBnZW5lcmljIG5hbWUKICAgIHByaXZhdGUgZnVuYyBnZXRHZW5lcmljc1dpdGhvdXRDb25zdHJhaW50cygpIC0+IFtTdHJpbmddIHsKICAgICAgICBsZXQgbmFtZSA9IG1ldGhvZC5zaG9ydE5hbWUKICAgICAgICBndWFyZCBsZXQgc3RhcnQgPSBuYW1lLmluZGV4KG9mOiAiPCIpLCBsZXQgZW5kID0gbmFtZS5pbmRleChvZjogIj4iKSBlbHNlIHsgcmV0dXJuIFtdIH0KCiAgICAgICAgdmFyIGdlblBhcnQgPSBuYW1lW3N0YXJ0Li4uZW5kXQogICAgICAgIGdlblBhcnQucmVtb3ZlRmlyc3QoKQogICAgICAgIGdlblBhcnQucmVtb3ZlTGFzdCgpCgogICAgICAgIGxldCBwYXJ0cyA9IGdlblBhcnQucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIgIiwgd2l0aDogIiIpLmNoYXJhY3RlcnMuc3BsaXQoc2VwYXJhdG9yOiAiLCIpLm1hcChTdHJpbmcuaW5pdCkKICAgICAgICByZXR1cm4gcGFydHMubWFwIHsgc3RyaXBHZW5QYXJ0KHBhcnQ6ICQwKSB9CiAgICB9CgogICAgLy8vIFJldHVybnMgbGlzdCBvZiBnZW5lcmljIGNvbnN0cmFpbnRlcyBmcm9tIG1ldGhvZCBzaWduYXR1cmUuIERvZXMgb25seSBjb250YWluIHN0dWZmIGJldHdlZW4gJzwnIGFuZCAnPicKICAgIC8vLwogICAgLy8vIC0gUmV0dXJuczogQXJyYXkgb2Ygc3RyaW5ncywgbGlrZSBbIlQ6IENvZGFibGUiLCAiVTogV2hhdGV2ZXIiXQogICAgcHJpdmF0ZSBmdW5jIGdldEdlbmVyaWNzQ29uc3RyYWludHMoXyBnZW5lcmljczogW1N0cmluZ10pIC0+IFtTdHJpbmddIHsKICAgICAgICBsZXQgbmFtZSA9IG1ldGhvZC5zaG9ydE5hbWUKICAgICAgICBndWFyZCBsZXQgc3RhcnQgPSBuYW1lLmluZGV4KG9mOiAiPCIpLCBsZXQgZW5kID0gbmFtZS5pbmRleChvZjogIj4iKSBlbHNlIHsgcmV0dXJuIFtdIH0KCiAgICAgICAgdmFyIGdlblBhcnQgPSBuYW1lW3N0YXJ0Li4uZW5kXQogICAgICAgIGdlblBhcnQucmVtb3ZlRmlyc3QoKQogICAgICAgIGdlblBhcnQucmVtb3ZlTGFzdCgpCgogICAgICAgIGxldCBwYXJ0cyA9IGdlblBhcnQucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIgIiwgd2l0aDogIiIpLmNoYXJhY3RlcnMuc3BsaXQoc2VwYXJhdG9yOiAiLCIpLm1hcChTdHJpbmcuaW5pdCkKICAgICAgICByZXR1cm4gcGFydHMuZmlsdGVyIHsKICAgICAgICAgICAgbGV0IGNvbXBvbmVudHMgPSAkMC5jb21wb25lbnRzKHNlcGFyYXRlZEJ5OiAiOiIpCiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRzLmNvdW50ID09IDIgJiYgZ2VuZXJpY3MuY29udGFpbnMoY29tcG9uZW50c1swXSkKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIGdldEdlbmVyaWNzQW1vbmdQYXJhbWV0ZXJzKCkgLT4gW1N0cmluZ10gewogICAgICAgIHJldHVybiBnZXRHZW5lcmljc1dpdGhvdXRDb25zdHJhaW50cygpLmZpbHRlciB7CiAgICAgICAgICAgIGZvciBwYXJhbSBpbiBzZWxmLnBhcmFtZXRlcnMgewogICAgICAgICAgICAgICAgaWYgcGFyYW0uaXNHZW5lcmljKFskMF0pIHsgcmV0dXJuIHRydWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgd3JhcEdlbmVyaWNzKF8gZ2VuZXJpY3M6IFtTdHJpbmddKSAtPiBTdHJpbmcgewogICAgICAgIGd1YXJkICFnZW5lcmljcy5pc0VtcHR5IGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIHJldHVybiAiPFwoZ2VuZXJpY3Muam9pbmVkKHNlcGFyYXRvcjoiLCIpKT4iCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIHN0cmlwR2VuUGFydChwYXJ0OiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHBhcnQuY2hhcmFjdGVycy5zcGxpdChzZXBhcmF0b3I6ICI6IikubWFwKFN0cmluZy5pbml0KS5maXJzdCEKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgcmV0dXJuVHlwZVN0cmlwcGVkKF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kLCB0eXBlOiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVSYXcgPSAiXChtZXRob2QucmV0dXJuVHlwZU5hbWUpIgogICAgICAgIHZhciBzdHJpcHBlZDogU3RyaW5nID0gewogICAgICAgICAgICBndWFyZCBsZXQgcmFuZ2UgPSByZXR1cm5UeXBlUmF3LnJhbmdlKG9mOiAid2hlcmUiKSBlbHNlIHsgcmV0dXJuIHJldHVyblR5cGVSYXcgfQogICAgICAgICAgICB2YXIgc3RyaXBwZWQgPSByZXR1cm5UeXBlUmF3CiAgICAgICAgICAgIHN0cmlwcGVkLnJlbW92ZVN1YnJhbmdlKChyYW5nZS5sb3dlckJvdW5kKS4uLikKICAgICAgICAgICAgcmV0dXJuIHN0cmlwcGVkCiAgICAgICAgfSgpCiAgICAgICAgc3RyaXBwZWQgPSBzdHJpcHBlZC50cmltbWluZ0NoYXJhY3RlcnMoaW46IENoYXJhY3RlclNldChjaGFyYWN0ZXJzSW46ICIgIikpCiAgICAgICAgZ3VhcmQgdHlwZSBlbHNlIHsgcmV0dXJuIHN0cmlwcGVkIH0KICAgICAgICByZXR1cm4gIihcKHN0cmlwcGVkKSkuVHlwZSIKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgd2hlcmVDbGF1c2VDb25zdHJhaW50cygpIC0+IFtTdHJpbmddIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVJhdyA9IG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lCiAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiBbXSB9CiAgICAgICAgdmFyIHdoZXJlQ2xhdXNlID0gcmV0dXJuVHlwZVJhdwogICAgICAgIHdoZXJlQ2xhdXNlLnJlbW92ZVN1YnJhbmdlKC4uLihyYW5nZS51cHBlckJvdW5kKSkKICAgICAgICByZXR1cm4gd2hlcmVDbGF1c2UKICAgICAgICAgICAgLnRyaW1taW5nQ2hhcmFjdGVycyhpbjogQ2hhcmFjdGVyU2V0LndoaXRlc3BhY2VzQW5kTmV3bGluZXMpCiAgICAgICAgICAgIC5jb21wb25lbnRzKHNlcGFyYXRlZEJ5OiAiLCIpCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIHdoZXJlQ2xhdXNlRXhwcmVzc2lvbigpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGNvbnN0cmFpbnRzID0gd2hlcmVDbGF1c2VDb25zdHJhaW50cygpCiAgICAgICAgaWYgY29uc3RyYWludHMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgIH0KICAgICAgICByZXR1cm4gIiB3aGVyZSAiICsgY29uc3RyYWludHMuam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgbWV0aG9kSW5mbyhfIGRlcHJlY2F0ZWQ6IEJvb2wsIF8gYW5ub3RhdGVkOiBCb29sKQogICAgICAgIC0+IChhbm5vdGF0aW9uOiBTdHJpbmcsIG1ldGhvZE5hbWU6IFN0cmluZywgZ2VuZXJpY0NvbnN0cmFpbnM6IFN0cmluZykgewogICAgICAgICAgICBsZXQgZ2VuZXJpY3MgPSBnZXRHZW5lcmljc0Ftb25nUGFyYW1ldGVycygpCiAgICAgICAgICAgIGxldCBhbm5vdGF0aW9uID0gYW5ub3RhdGVkICYmIGRlcHJlY2F0ZWQgPyBkZXByZWNhdGVkTWVzc2FnZShkZXByZWNhdGVkUGFyYW1ldGVyc01lc3NhZ2UoKSkgOiAiIgogICAgICAgICAgICBsZXQgbWV0aG9kTmFtZSA9IHJldHVyblR5cGVNYXR0ZXJzKCkgPyBtZXRob2Quc2hvcnROYW1lIDogIlwobWV0aG9kLmNhbGxOYW1lKVwod3JhcEdlbmVyaWNzKGdlbmVyaWNzKSkiCiAgICAgICAgICAgIGxldCBjb25zdHJhaW50czogU3RyaW5nID0gewogICAgICAgICAgICAgICAgbGV0IGNvbnN0cmFpbnRzOiBbU3RyaW5nXQogICAgICAgICAgICAgICAgaWYgcmV0dXJuVHlwZU1hdHRlcnMoKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludHMgPSB3aGVyZUNsYXVzZUNvbnN0cmFpbnRzKCkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludHMgPSBnZXRHZW5lcmljc0NvbnN0cmFpbnRzKGdlbmVyaWNzKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ3VhcmQgIWNvbnN0cmFpbnRzLmlzRW1wdHkgZWxzZSB7IHJldHVybiAiIiB9CgogICAgICAgICAgICAgICAgcmV0dXJuICIgd2hlcmUgXChjb25zdHJhaW50cy5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSkiCiAgICAgICAgICAgIH0oKQogICAgICAgICAgICByZXR1cm4gKGFubm90YXRpb24sIG1ldGhvZE5hbWUsIGNvbnN0cmFpbnRzKQogICAgfQogICAgCiAgICAvLyBNQVJLOiAtIE5ldwogICAgCiAgICBmdW5jIGludm9rZUJvZHkoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiIiIKICAgICAgICByZXR1cm4gXChpbnZva2VDYWxsKSB7CiAgICAgICAgXHRcdFx0KCQwIGFzPyBcKHBlcmZvcm1Qcm94eUNsb3N1cmVUeXBlKCkpKT8oXChwZXJmb3JtUHJveHlDbG9zdXJlQXJndW1lbnRzKSkKICAgICAgICBcdFx0fQogICAgICAgICIiIgogICAgfQogICAgCiAgICBwcml2YXRlIHZhciBpbnZva2VDYWxsOiBTdHJpbmcgewogICAgICAgIGxldCBwcmVmaXggPSAgbWV0aG9kLnRocm93cyA/ICJ0cnkgIiA6ICIiCiAgICAgICAgcmV0dXJuIHByZWZpeCArICJyZWdpc3RyeS5cKGludm9rZUZ1bmNOYW1lKShcKGZ1bGxNZXRob2RUeXBlQ2FsbCkpIgogICAgfQogICAgCiAgICBwcml2YXRlIHZhciBpbnZva2VGdW5jTmFtZTogU3RyaW5nIHsKICAgICAgICBsZXQgc3VmZml4ID0gbWV0aG9kLnRocm93cyA/ICJUaHJvd2luZyIgOiAiIgogICAgICAgIHJldHVybiAiaW52b2tlIiArIHN1ZmZpeAogICAgfQogICAgCiAgICBwcml2YXRlIHZhciBmdWxsTWV0aG9kVHlwZUNhbGw6IFN0cmluZyB7CiAgICAgICAgbGV0IHByZWZpeCA9IG1ldGhvZC5pc1N0YXRpYyA/ICJTdGF0aWMiIDogIiIKICAgICAgICByZXR1cm4gcHJlZml4ICsgIk1ldGhvZFR5cGVcKHNob3J0TWV0aG9kVHlwZUNhbGwpIgogICAgfQogICAgCiAgICBwcml2YXRlIHZhciBzaG9ydE1ldGhvZFR5cGVDYWxsOiBTdHJpbmcgewogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gIi5cKHByb3RvdHlwZSkiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICIuXChwcm90b3R5cGUpKFwocGFyYW1ldGVyc0Zvck1ldGhvZENhbGwoKSkpIgogICAgICAgIH0KICAgIH0KICAgIAogICAgcHJpdmF0ZSB2YXIgc3RyaW5naWZpZWRNZXRob2ROYW1lOiBTdHJpbmcgewogICAgICAgIHJldHVybiBtZXRob2QubmFtZS5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIlx0Iiwgd2l0aDogIiAiKQogICAgfQogICAgCiAgICBwcml2YXRlIHZhciBwZXJmb3JtUHJveHlDbG9zdXJlQXJndW1lbnRzOiBTdHJpbmcgewogICAgICAgIGlmIG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gbWV0aG9kLnBhcmFtZXRlcnMKICAgICAgICAgICAgICAgIC5tYXAgeyBwIGluCiAgICAgICAgICAgICAgICAgICAgbGV0IHdyYXBwZWQgPSBQYXJhbWV0ZXJXcmFwcGVyKHApCiAgICAgICAgICAgICAgICAgICAgbGV0IGlzQXV0b2xvc3VyZSA9IHdyYXBwZWQuanVzdFR5cGUuaGFzUHJlZml4KCJAYXV0b2Nsb3N1cmUiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiXChwLmlub3V0ID8gIiYiIDogIiIpYFwocC5uYW1lKWBcKGlzQXV0b2xvc3VyZSA/ICIoKSIgOiAiIikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgfQogICAgfQp9CgpjbGFzcyBTdWJzY3JpcHRXcmFwcGVyIHsKICAgIGxldCB3cmFwcGVkOiBTb3VyY2VyeVJ1bnRpbWUuU3Vic2NyaXB0CiAgICB2YXIgcmVhZG9ubHk6IEJvb2wgeyByZXR1cm4gIXdyYXBwZWQuaXNNdXRhYmxlIH0KICAgIHZhciB3cmFwcGVkUGFyYW1ldGVyczogW1BhcmFtZXRlcldyYXBwZXJdIHsgcmV0dXJuIHdyYXBwZWQucGFyYW1ldGVycy5tYXAgeyBQYXJhbWV0ZXJXcmFwcGVyKCQwKSB9IH0KICAgIHZhciBjYXNlc0NvdW50OiBJbnQgeyByZXR1cm4gcmVhZG9ubHkgPyAxIDogMiB9CiAgICB2YXIgbmVzdGVkVHlwZTogU3RyaW5nIHsgcmV0dXJuICJcKFR5cGVXcmFwcGVyKHdyYXBwZWQucmV0dXJuVHlwZU5hbWUpLm5lc3RlZFBhcmFtZXRlcikiIH0KICAgIGxldCBhc3NvY2lhdGVkVHlwZXM6IFtTdHJpbmddPwogICAgbGV0IGdlbmVyaWNUeXBlc0xpc3Q6IFtTdHJpbmddCiAgICBsZXQgZ2VuZXJpY1R5cGVzTW9kaWZpZXI6IFN0cmluZz8KCiAgICBwcml2YXRlIGxldCBub1N0dWJEZWZpbmVkTWVzc2FnZSA9ICJTdHViIHJldHVybiB2YWx1ZSBub3Qgc3BlY2lmaWVkIGZvciBzdWJzY3JpcHQuIFVzZSBnaXZlbiBmaXJzdC4iCgogICAgcHJpdmF0ZSBzdGF0aWMgdmFyIHJlZ2lzdGVyZWQ6IFtTdHJpbmc6IEludF0gPSBbOl0KICAgIHByaXZhdGUgc3RhdGljIHZhciBuYW1lc1dpdGhvdXRSZXR1cm5UeXBlOiBbU3RyaW5nOiBJbnRdID0gWzpdCiAgICBwcml2YXRlIHN0YXRpYyB2YXIgc3VmZml4ZXM6IFtTdHJpbmc6IEludF0gPSBbOl0KICAgIHB1YmxpYyBzdGF0aWMgZnVuYyBjbGVhcigpIC0+IFN0cmluZyB7CiAgICAgICAgU3Vic2NyaXB0V3JhcHBlci5yZWdpc3RlcmVkID0gWzpdCiAgICAgICAgU3Vic2NyaXB0V3JhcHBlci5zdWZmaXhlcyA9IFs6XQogICAgICAgIHJldHVybiAiIgogICAgfQogICAgc3RhdGljIGZ1bmMgcmVnaXN0ZXIoXyBuYW1lOiBTdHJpbmcsIF8gdW5pcXVlTmFtZTogU3RyaW5nKSB7CiAgICAgICAgbGV0IGNvdW50ID0gU3Vic2NyaXB0V3JhcHBlci5yZWdpc3RlcmVkW25hbWVdID8/IDAKICAgICAgICBTdWJzY3JpcHRXcmFwcGVyLnJlZ2lzdGVyZWRbbmFtZV0gPSBjb3VudCArIDEKICAgICAgICBTdWJzY3JpcHRXcmFwcGVyLnN1ZmZpeGVzW3VuaXF1ZU5hbWVdID0gY291bnQgKyAxCiAgICB9CiAgICBzdGF0aWMgZnVuYyByZWdpc3RlcihzaG9ydCBuYW1lOiBTdHJpbmcpIHsKICAgICAgICBsZXQgY291bnQgPSBTdWJzY3JpcHRXcmFwcGVyLm5hbWVzV2l0aG91dFJldHVyblR5cGVbbmFtZV0gPz8gMAogICAgICAgIFN1YnNjcmlwdFdyYXBwZXIubmFtZXNXaXRob3V0UmV0dXJuVHlwZVtuYW1lXSA9IGNvdW50ICsgMQogICAgfQoKICAgIGZ1bmMgcmVnaXN0ZXIoKSB7CiAgICAgICAgU3Vic2NyaXB0V3JhcHBlci5yZWdpc3RlcihyZWdpc3RyYXRpb25OYW1lKCJnZXQiKSx1bmlxdWVOYW1lKQogICAgICAgIFN1YnNjcmlwdFdyYXBwZXIucmVnaXN0ZXIoc2hvcnQ6IHNob3J0TmFtZSkKICAgICAgICBndWFyZCAhcmVhZG9ubHkgZWxzZSB7IHJldHVybiB9CiAgICAgICAgU3Vic2NyaXB0V3JhcHBlci5yZWdpc3RlcihyZWdpc3RyYXRpb25OYW1lKCJzZXQiKSx1bmlxdWVOYW1lKQogICAgfQoKICAgIGluaXQoXyB3cmFwcGVkOiBTb3VyY2VyeVJ1bnRpbWUuU3Vic2NyaXB0KSB7CiAgICAgICAgc2VsZi53cmFwcGVkID0gd3JhcHBlZAogICAgICAgIGFzc29jaWF0ZWRUeXBlcyA9IEhlbHBlcnMuZXh0cmFjdEFzc29jaWF0ZWRUeXBlcyhmcm9tOiB3cmFwcGVkKQogICAgICAgIGdlbmVyaWNUeXBlc0xpc3QgPSBIZWxwZXJzLmV4dHJhY3RHZW5lcmljc0xpc3QoYXNzb2NpYXRlZFR5cGVzKQogICAgICAgIGlmIGxldCB0eXBlcyA9IGFzc29jaWF0ZWRUeXBlcyB7CiAgICAgICAgICAgIGdlbmVyaWNUeXBlc01vZGlmaWVyID0gIjxcKHR5cGVzLmpvaW5lZChzZXBhcmF0b3I6ICIsIikpPiIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBnZW5lcmljVHlwZXNNb2RpZmllciA9IG5pbAogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIHJlZ2lzdHJhdGlvbk5hbWUoXyBhY2Nlc3NvcjogU3RyaW5nKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAic3Vic2NyaXB0X1woYWNjZXNzb3IpX1wod3JhcHBlZFBhcmFtZXRlcnMubWFwKHsgJDAuc2FuaXRpemVkRm9yRW51bUNhc2VOYW1lKCkgfSkuam9pbmVkKHNlcGFyYXRvcjogIl8iKSkiCiAgICB9CiAgICB2YXIgc2hvcnROYW1lOiBTdHJpbmcgeyByZXR1cm4gInB1YmxpYyBzdWJzY3JpcHRcKGdlbmVyaWNUeXBlc01vZGlmaWVyID8/ICIgIikoXCh3cmFwcGVkUGFyYW1ldGVycy5tYXAoeyAkMC5hc01ldGhvZEFyZ3VtZW50KCkgfSkuam9pbmVkKHNlcGFyYXRvcjogIiwgIikpKSIgfQogICAgdmFyIHVuaXF1ZU5hbWU6IFN0cmluZyB7IHJldHVybiAiXChzaG9ydE5hbWUpIC0+IFwod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSkiIH0KCiAgICBwcml2YXRlIGZ1bmMgbmFtZVN1ZmZpeChfIGFjY2Vzc29yOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgbGV0IGNvdW50ID0gU3Vic2NyaXB0V3JhcHBlci5yZWdpc3RlcmVkW3JlZ2lzdHJhdGlvbk5hbWUoYWNjZXNzb3IpXSBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBndWFyZCBjb3VudCA+IDEgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgZ3VhcmQgbGV0IGluZGV4ID0gU3Vic2NyaXB0V3JhcHBlci5zdWZmaXhlc1t1bmlxdWVOYW1lXSBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICByZXR1cm4gIl9cKGluZGV4KSIKICAgIH0KCiAgICAvLyBjYWxsCiAgICBmdW5jIHN1YnNjcmlwdENhbGwoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBnZXQgPSAiXG5cdFx0Z2V0IHtcKGdldHRlcigpKVxuXHRcdH0iCiAgICAgICAgbGV0IHNldCA9IHJlYWRvbmx5ID8gIiIgOiAiXG5cdFx0c2V0IHtcKHNldHRlcigpKVxuXHRcdH0iCiAgICAgICAgcmV0dXJuICJcKHVuaXF1ZU5hbWUpIHtcKGdldClcKHNldClcblx0fSIKICAgIH0KICAgIHByaXZhdGUgZnVuYyBnZXR0ZXIoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBtZXRob2QgPSAiLlwoc3Vic2NyaXB0Q2FzZVByZWZpeCgiZ2V0IikpKFwocGFyYW1ldGVyc0Zvck1ldGhvZENhbGwoKSkpIgogICAgICAgIGxldCBub1N0dWJEZWZpbmVkID0gd3JhcHBlZC5yZXR1cm5UeXBlTmFtZS5pc09wdGlvbmFsID8gInJldHVybiBuaWwiIDogInJlZ2lzdHJ5Lm9uRmF0YWxGYWlsdXJlKFwiXChub1N0dWJEZWZpbmVkTWVzc2FnZSlcIik7IEZhaWx1cmUoXCJub1N0dWJEZWZpbmVkTWVzc2FnZVwiKSIKICAgICAgICByZXR1cm4KICAgICAgICAgICAgIlxuXHRcdFx0cmVnaXN0cnkuYWRkSW52b2NhdGlvbihcKG1ldGhvZCkpIiArCiAgICAgICAgICAgICAgICAiXG5cdFx0XHRkbyB7IiArCiAgICAgICAgICAgICAgICAiXG5cdFx0XHRcdHJldHVybiB0cnkgcmVnaXN0cnkubWV0aG9kUmV0dXJuVmFsdWUoXChtZXRob2QpKS5jYXN0ZWQoKSIgKwogICAgICAgICAgICAgICAgIlxuXHRcdFx0fSBjYXRjaCB7IiArCiAgICAgICAgICAgICAgICAiXG5cdFx0XHRcdFwobm9TdHViRGVmaW5lZCkiICsKICAgICAgICAiXG5cdFx0XHR9IgogICAgfQogICAgcHJpdmF0ZSBmdW5jIHNldHRlcigpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IG1ldGhvZCA9ICIuXChzdWJzY3JpcHRDYXNlUHJlZml4KCJzZXQiKSkoXChwYXJhbWV0ZXJzRm9yTWV0aG9kQ2FsbChzZXQ6IHRydWUpKSkiCiAgICAgICAgcmV0dXJuICJcblx0XHRcdHJlZ2lzdHJ5LmFkZEludm9jYXRpb24oXChtZXRob2QpKSIKICAgIH0KCiAgICAvLyBtZXRob2QgdHlwZQogICAgZnVuYyBzdWJzY3JpcHRDYXNlUHJlZml4KF8gYWNjZXNzb3I6IFN0cmluZykgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gIlwocmVnaXN0cmF0aW9uTmFtZShhY2Nlc3NvcikpXChuYW1lU3VmZml4KGFjY2Vzc29yKSkiCiAgICB9CiAgICBmdW5jIHN1YnNjcmlwdENhc2VOYW1lKF8gYWNjZXNzb3I6IFN0cmluZykgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gIlwoc3Vic2NyaXB0Q2FzZVByZWZpeChhY2Nlc3NvcikpKFwocGFyYW1ldGVyc0Zvck1ldGhvZFR5cGVEZWNsYXJhdGlvbihzZXQ6IGFjY2Vzc29yID09ICJzZXQiKSkpIgogICAgfQogICAgZnVuYyBzdWJzY3JpcHRDYXNlcygpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHJlYWRvbmx5ID8gImNhc2UgXChzdWJzY3JpcHRDYXNlTmFtZSgiZ2V0IikpIiA6ICJjYXNlIFwoc3Vic2NyaXB0Q2FzZU5hbWUoImdldCIpKVxuXHRcdGNhc2UgXChzdWJzY3JpcHRDYXNlTmFtZSgic2V0IikpIgogICAgfQogICAgZnVuYyBlcXVhbENhc2UoXyBhY2Nlc3NvcjogU3RyaW5nKSAtPiBTdHJpbmcgewogICAgICAgIHZhciBsaHNQYXJhbXMgPSB3cmFwcGVkLnBhcmFtZXRlcnMubWFwIHsgImxoc1woJDAubmFtZS5jYXBpdGFsaXplZCkiIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgICAgICB2YXIgcmhzUGFyYW1zID0gd3JhcHBlZC5wYXJhbWV0ZXJzLm1hcCB7ICJyaHNcKCQwLm5hbWUuY2FwaXRhbGl6ZWQpIiB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgdmFyIGNvbXBhcmF0b3JzID0gd3JhcHBlZFBhcmFtZXRlcnMubWFwIHsgIlx0XHRcdFx0XCgkMC5jb21wYXJhdG9yKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiXG4iKQogICAgICAgIGlmIGFjY2Vzc29yID09ICJzZXQiIHsKICAgICAgICAgICAgbGhzUGFyYW1zICs9ICIsIGxoc0RpZFNldCIKICAgICAgICAgICAgcmhzUGFyYW1zICs9ICIsIHJoc0RpZFNldCIKICAgICAgICAgICAgY29tcGFyYXRvcnMgKz0gIlxuXHRcdFx0XHRyZXR1cm4gUGFyYW1ldGVyLmNvbXBhcmUobGhzOiBsaHNEaWRTZXQsIHJoczogcmhzRGlkU2V0LCB3aXRoOiBtYXRjaGVyKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb21wYXJhdG9ycyArPSAiXG5cdFx0XHRcdHJldHVybiB0cnVlIgogICAgICAgIH0KICAgICAgICByZXR1cm4gImNhc2UgKGxldCAuXChzdWJzY3JpcHRDYXNlUHJlZml4KGFjY2Vzc29yKSkoXChsaHNQYXJhbXMpKSwgbGV0IC5cKHN1YnNjcmlwdENhc2VQcmVmaXgoYWNjZXNzb3IpKShcKHJoc1BhcmFtcykpKTpcbiIgKyBjb21wYXJhdG9ycwogICAgfQogICAgZnVuYyBlcXVhbENhc2VzKCkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gcmVhZG9ubHkgPyBlcXVhbENhc2UoImdldCIpIDogIlwoZXF1YWxDYXNlKCJnZXQiKSlcblx0XHRcdFwoZXF1YWxDYXNlKCJzZXQiKSkiCiAgICB9CiAgICBmdW5jIGludFZhbHVlQ2FzZSgpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHJlYWRvbmx5ID8gaW50VmFsdWVDYXNlKCJnZXQiKSA6ICJcKGludFZhbHVlQ2FzZSgiZ2V0IikpXG5cdFx0XHRcKGludFZhbHVlQ2FzZSgic2V0IikpIgogICAgfQogICAgZnVuYyBpbnRWYWx1ZUNhc2UoXyBhY2Nlc3NvcjogU3RyaW5nKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBwYXJhbXMgPSB3cmFwcGVkUGFyYW1ldGVycy5lbnVtZXJhdGVkKCkubWFwIHsgb2Zmc2V0LCBfIGluCiAgICAgICAgICAgIHJldHVybiAicFwob2Zmc2V0KSIKICAgICAgICB9CiAgICAgICAgbGV0IGRlZmluaXRpb25zID0gcGFyYW1zLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpICsgKGFjY2Vzc29yID09ICJzZXQiID8gIiwgXyIgOiAiIikKICAgICAgICBsZXQgcGFyYW1zU3VtID0gcGFyYW1zLm1hcCh7ICJcKCQwKS5pbnRWYWx1ZSIgfSkuam9pbmVkKHNlcGFyYXRvcjogIiArICIpCiAgICAgICAgcmV0dXJuICJjYXNlIGxldCAuXChzdWJzY3JpcHRDYXNlUHJlZml4KGFjY2Vzc29yKSkoXChkZWZpbml0aW9ucykpOiByZXR1cm4gXChwYXJhbXNTdW0pIgogICAgfQoKICAgIC8vIEdpdmVuCiAgICBmdW5jIGdpdmVuQ29uc3RydWN0b3JOYW1lKCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZyA9IHJldHVybnNTZWxmID8gcmVwbGFjZVNlbGYgOiBUeXBlV3JhcHBlcih3cmFwcGVkLnJldHVyblR5cGVOYW1lKS5zdHJpcHBlZAogICAgICAgIHJldHVybiAicHVibGljIHN0YXRpYyBmdW5jIGBzdWJzY3JpcHRgXChnZW5lcmljVHlwZXNNb2RpZmllciA/PyAiIikoXChwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoKSksIHdpbGxSZXR1cm46IFwocmV0dXJuVHlwZVN0cmluZykuLi4pIC0+IFN1YnNjcmlwdFN0dWIiCiAgICB9CiAgICBmdW5jIGdpdmVuQ29uc3RydWN0b3IoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAicmV0dXJuIEdpdmVuKG1ldGhvZDogLlwoc3Vic2NyaXB0Q2FzZVByZWZpeCgiZ2V0IikpKFwocGFyYW1ldGVyc0ZvclByb3h5SW5pdCgpKSksIHByb2R1Y3RzOiB3aWxsUmV0dXJuLm1hcCh7IFN0dWJQcm9kdWN0LnJldHVybigkMCBhcyBBbnkpIH0pKSIKICAgIH0KCiAgICAvLyBWZXJpZnkKICAgIGZ1bmMgdmVyaWZ5Q29uc3RydWN0b3JOYW1lKHNldDogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlU3RyaW5nID0gcmV0dXJuc1NlbGYgPyByZXBsYWNlU2VsZiA6IG5lc3RlZFR5cGUKICAgICAgICBsZXQgcmV0dXJuaW5nID0gc2V0ID8gIiIgOiByZXR1cm5pbmdQYXJhbWV0ZXIodHJ1ZSwgdHJ1ZSkKICAgICAgICByZXR1cm4gInB1YmxpYyBzdGF0aWMgZnVuYyBgc3Vic2NyaXB0YFwoZ2VuZXJpY1R5cGVzTW9kaWZpZXIgPz8gIiIpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKCkpXChyZXR1cm5pbmcpXChzZXQgPyAiLCBzZXQgbmV3VmFsdWU6IFwocmV0dXJuVHlwZVN0cmluZykiIDogIiIpKSAtPiBWZXJpZnkiCiAgICB9CiAgICBmdW5jIHZlcmlmeUNvbnN0cnVjdG9yKHNldDogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAicmV0dXJuIFZlcmlmeShtZXRob2Q6IC5cKHN1YnNjcmlwdENhc2VQcmVmaXgoc2V0ID8gInNldCIgOiAiZ2V0IikpKFwocGFyYW1ldGVyc0ZvclByb3h5SW5pdChzZXQ6IHNldCkpKSkiCiAgICB9CgogICAgLy8gR2VuZXJpY3MKICAgIHByaXZhdGUgZnVuYyBnZXRHZW5lcmljcygpIC0+IFtTdHJpbmddIHsKICAgICAgICByZXR1cm4gZ2VuZXJpY1R5cGVzTGlzdAogICAgfQoKICAgIC8vIEhlbHBlcnMKICAgIHByaXZhdGUgdmFyIHJldHVybnNTZWxmOiBCb29sIHsgcmV0dXJuIFR5cGVXcmFwcGVyKHdyYXBwZWQucmV0dXJuVHlwZU5hbWUpLmlzU2VsZlR5cGUgfQogICAgcHJpdmF0ZSB2YXIgcmVwbGFjZVNlbGY6IFN0cmluZyB7IHJldHVybiBDdXJyZW50LnNlbGZUeXBlIH0KICAgIHByaXZhdGUgZnVuYyByZXR1cm5UeXBlU3RyaXBwZWQodHlwZTogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSkiCiAgICAgICAgdmFyIHN0cmlwcGVkOiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGd1YXJkIGxldCByYW5nZSA9IHJldHVyblR5cGVSYXcucmFuZ2Uob2Y6ICJ3aGVyZSIpIGVsc2UgeyByZXR1cm4gcmV0dXJuVHlwZVJhdyB9CiAgICAgICAgICAgIHZhciBzdHJpcHBlZCA9IHJldHVyblR5cGVSYXcKICAgICAgICAgICAgc3RyaXBwZWQucmVtb3ZlU3VicmFuZ2UoKHJhbmdlLmxvd2VyQm91bmQpLi4uKQogICAgICAgICAgICByZXR1cm4gc3RyaXBwZWQKICAgICAgICB9KCkKICAgICAgICBzdHJpcHBlZCA9IHN0cmlwcGVkLnRyaW1taW5nQ2hhcmFjdGVycyhpbjogQ2hhcmFjdGVyU2V0KGNoYXJhY3RlcnNJbjogIiAiKSkKICAgICAgICBndWFyZCB0eXBlIGVsc2UgeyByZXR1cm4gc3RyaXBwZWQgfQogICAgICAgIHJldHVybiAiKFwoc3RyaXBwZWQpKS5UeXBlIgogICAgfQogICAgcHJpdmF0ZSBmdW5jIHJldHVyblR5cGVNYXR0ZXJzKCkgLT4gQm9vbCB7CiAgICAgICAgbGV0IGNvdW50ID0gU3Vic2NyaXB0V3JhcHBlci5uYW1lc1dpdGhvdXRSZXR1cm5UeXBlW3Nob3J0TmFtZV0gPz8gMAogICAgICAgIHJldHVybiBjb3VudCA+IDEKICAgIH0KCiAgICAvLyBwYXJhbXMKICAgIHByaXZhdGUgZnVuYyByZXR1cm5pbmdQYXJhbWV0ZXIoXyBtdWx0aXBsZTogQm9vbCwgXyBmcm9udDogQm9vbCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCByZXR1cm5UeXBlTWF0dGVycygpIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGxldCByZXR1cm5pbmc6IFN0cmluZyA9ICJyZXR1cm5pbmc6IFwocmV0dXJuVHlwZVN0cmlwcGVkKHR5cGU6IHRydWUpKSIKICAgICAgICBndWFyZCBtdWx0aXBsZSBlbHNlIHsgcmV0dXJuIHJldHVybmluZyB9CiAgICAgICAgcmV0dXJuIGZyb250ID8gIiwgXChyZXR1cm5pbmcpIiA6ICJcKHJldHVybmluZyksICIKICAgIH0KICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yTWV0aG9kVHlwZURlY2xhcmF0aW9uKHNldDogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBnZW5lcmljczogW1N0cmluZ10gPSBnZXRHZW5lcmljcygpCiAgICAgICAgbGV0IHBhcmFtcyA9IHdyYXBwZWRQYXJhbWV0ZXJzLm1hcCB7IHBhcmFtIGluCiAgICAgICAgICAgIHJldHVybiBwYXJhbS5pc0dlbmVyaWMoZ2VuZXJpY3MpID8gcGFyYW0uZ2VuZXJpY1R5cGUgOiBwYXJhbS5uZXN0ZWRUeXBlCiAgICAgICAgICAgIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgICAgICBndWFyZCBzZXQgZWxzZSB7IHJldHVybiBwYXJhbXMgfQogICAgICAgIGxldCBuZXdWYWx1ZSA9IFR5cGVXcmFwcGVyKHdyYXBwZWQucmV0dXJuVHlwZU5hbWUpLmlzR2VuZXJpYyhnZW5lcmljcykgPyAiUGFyYW1ldGVyPEdlbmVyaWNBdHRyaWJ1dGU+IiA6IG5lc3RlZFR5cGUKICAgICAgICByZXR1cm4gIlwocGFyYW1zKSwgXChuZXdWYWx1ZSkiCiAgICB9CiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0ZvclByb3h5SW5pdChzZXQ6IEJvb2wgPSBmYWxzZSkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgZ2VuZXJpY3MgPSBnZXRHZW5lcmljcygpCiAgICAgICAgbGV0IG5ld1ZhbHVlID0gVHlwZVdyYXBwZXIod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSkuaXNHZW5lcmljKGdlbmVyaWNzKSA/ICJuZXdWYWx1ZS53cmFwQXNHZW5lcmljKCkiIDogIm5ld1ZhbHVlIgogICAgICAgIHJldHVybiB3cmFwcGVkUGFyYW1ldGVycy5tYXAgeyAiXCgkMC53cmFwcGVkRm9yUHJveHkoZ2VuZXJpY3MpKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSArIChzZXQgPyAiLCBcKG5ld1ZhbHVlKSIgOiAiIikKICAgIH0KICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoc2V0OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHdyYXBwZWRQYXJhbWV0ZXJzLm1hcCB7ICJcKCQwLmxhYmVsQW5kTmFtZSgpKTogXCgkMC5uZXN0ZWRUeXBlKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSArIChzZXQgPyAiLCBzZXQgbmV3VmFsdWU6IFwobmVzdGVkVHlwZSkiIDogIiIpCiAgICB9CiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0Zvck1ldGhvZENhbGwoc2V0OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGdlbmVyaWNzID0gZ2V0R2VuZXJpY3MoKQogICAgICAgIGxldCBwYXJhbXMgPSB3cmFwcGVkUGFyYW1ldGVycy5tYXAgeyAkMC53cmFwcGVkRm9yQ2FsbHMoZ2VuZXJpY3MpIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgICAgICBsZXQgcG9zdGZpeCA9IFR5cGVXcmFwcGVyKHdyYXBwZWQucmV0dXJuVHlwZU5hbWUpLmlzR2VuZXJpYyhnZW5lcmljcykgPyAiLndyYXBBc0dlbmVyaWMoKSIgOiAiIgogICAgICAgIHJldHVybiAhc2V0ID8gcGFyYW1zIDogIlwocGFyYW1zKSwgXChuZXN0ZWRUeXBlKS52YWx1ZShuZXdWYWx1ZSlcKHBvc3RmaXgpIgogICAgfQp9CmNsYXNzIFZhcmlhYmxlV3JhcHBlciB7CiAgICBsZXQgdmFyaWFibGU6IFNvdXJjZXJ5UnVudGltZS5WYXJpYWJsZQogICAgbGV0IHNjb3BlOiBTdHJpbmcKICAgIHZhciByZWFkb25seTogQm9vbCB7IHJldHVybiB2YXJpYWJsZS53cml0ZUFjY2Vzcy5pc0VtcHR5IH0KICAgIHZhciBwcml2YXRlUHJvdG90eXBlTmFtZTogU3RyaW5nIHsgcmV0dXJuICJfX3BfXCh2YXJpYWJsZS5uYW1lKSIucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJgIiwgd2l0aDogIiIpIH0KICAgIHZhciBjYXNlc0NvdW50OiBJbnQgeyByZXR1cm4gcmVhZG9ubHkgPyAxIDogMiB9CgogICAgbGV0IGRlcHJlY2F0ZWRNZXNzYWdlID0gIlVzaW5nIHNldHRlcnMgb24gcmVhZG9ubHkgdmFyaWFibGVzIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMy4xLiBVc2UgR2l2ZW4gdG8gZGVmaW5lIHN0dWJiZWQgcHJvcGVydHkgcmV0dXJuIHZhbHVlLiIKICAgIHZhciBub1N0dWJEZWZpbmVkTWVzc2FnZTogU3RyaW5nIHsgcmV0dXJuICJcKHNjb3BlKSAtIHN0dWIgdmFsdWUgZm9yIFwodmFyaWFibGUubmFtZSkgd2FzIG5vdCBkZWZpbmVkIiB9CgogICAgdmFyIGdldHRlcjogU3RyaW5nIHsKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXIgPSB2YXJpYWJsZS5pc1N0YXRpYyA/ICJcKHNjb3BlKS4iIDogIiIKICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSB2YXJpYWJsZS5pc09wdGlvbmFsID8gInJlZ2lzdHJ5Lm9wdGlvbmFsR2l2ZW5HZXR0ZXJWYWx1ZSguXChwcm9wZXJ0eUNhc2VHZXROYW1lKSwgXCJcKG5vU3R1YkRlZmluZWRNZXNzYWdlKVwiKSIgOiAicmVnaXN0cnkuZ2l2ZW5HZXR0ZXJWYWx1ZSguXChwcm9wZXJ0eUNhc2VHZXROYW1lKSwgXCJcKG5vU3R1YkRlZmluZWRNZXNzYWdlKVwiKSIKICAgICAgICByZXR1cm4gIlxuXHRcdGdldCB7XHRcKHN0YXRpY01vZGlmaWVyKXJlZ2lzdHJ5LmFkZEludm9jYXRpb24oLlwocHJvcGVydHlDYXNlR2V0TmFtZSkpOyByZXR1cm4gXChzdGF0aWNNb2RpZmllcilcKHByaXZhdGVQcm90b3R5cGVOYW1lKSA/PyBcKHJldHVyblZhbHVlKSB9IgogICAgfQogICAgdmFyIHNldHRlcjogU3RyaW5nIHsKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXIgPSB2YXJpYWJsZS5pc1N0YXRpYyA/ICJcKHNjb3BlKS4iIDogIiIKICAgICAgICBpZiByZWFkb25seSB7CiAgICAgICAgICAgIGxldCBhbm5vdGF0aW9uID0gcmVhZG9ubHkgPyAiXG5cdFx0QGF2YWlsYWJsZSgqLCBkZXByZWNhdGVkLCBtZXNzYWdlOiBcIlwoZGVwcmVjYXRlZE1lc3NhZ2UpXCIpIiA6ICIiCiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKVxuXHRcdHNldCB7XHRcKHZhcmlhYmxlLmlzU3RhdGljID8gIlwoc2NvcGUpLiIgOiAiIilcKHByaXZhdGVQcm90b3R5cGVOYW1lKSA9IG5ld1ZhbHVlIH0iCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcblx0XHRzZXQge1x0XChzdGF0aWNNb2RpZmllcilyZWdpc3RyeS5hZGRJbnZvY2F0aW9uKC5cKHByb3BlcnR5Q2FzZVNldE5hbWUpKC52YWx1ZShuZXdWYWx1ZSkpKTsgXCh2YXJpYWJsZS5pc1N0YXRpYyA/ICJcKHNjb3BlKS4iIDogIiIpXChwcml2YXRlUHJvdG90eXBlTmFtZSkgPSBuZXdWYWx1ZSB9IgogICAgICAgIH0KICAgIH0KICAgIHZhciBwcm90b3R5cGU6IFN0cmluZyB7CiAgICAgICAgbGV0IHN0YXRpY01vZGlmaWVyID0gdmFyaWFibGUuaXNTdGF0aWMgPyAic3RhdGljICIgOiAiIgoKICAgICAgICByZXR1cm4gInB1YmxpYyBcKHN0YXRpY01vZGlmaWVyKXZhciBcKHZhcmlhYmxlLm5hbWUpOiBcKHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUpIHsiICsKICAgICAgICAgICAgIlwoZ2V0dGVyKSIgKwogICAgICAgICAgICAiXChzZXR0ZXIpIiArCiAgICAgICAgIlxuXHR9IgogICAgfQoKICAgIHZhciBwcml2YXRlUHJvdG90eXBlOiBTdHJpbmcgewogICAgICAgIGxldCBzdGF0aWNNb2RpZmllciA9IHZhcmlhYmxlLmlzU3RhdGljID8gInN0YXRpYyAiIDogIiIKICAgICAgICByZXR1cm4gInByaXZhdGUgXChzdGF0aWNNb2RpZmllcil2YXIgXChwcml2YXRlUHJvdG90eXBlTmFtZSk6IChcKHZhcmlhYmxlLnR5cGVOYW1lLnVud3JhcHBlZFR5cGVOYW1lKSk/IgogICAgfQogICAgdmFyIG5lc3RlZFR5cGU6IFN0cmluZyB7IHJldHVybiAiXChUeXBlV3JhcHBlcih2YXJpYWJsZS50eXBlTmFtZSkubmVzdGVkUGFyYW1ldGVyKSIgfQoKICAgIGluaXQoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlLCBzY29wZTogU3RyaW5nKSB7CiAgICAgICAgc2VsZi52YXJpYWJsZSA9IHZhcmlhYmxlCiAgICAgICAgc2VsZi5zY29wZSA9IHNjb3BlCiAgICB9CgogICAgZnVuYyBwcm9wZXJ0eUdldCgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHN0YXRpY01vZGlmaWVyID0gdmFyaWFibGUuaXNTdGF0aWMgPyAiU3RhdGljIiA6ICIiCiAgICAgICAgcmV0dXJuICJwdWJsaWMgc3RhdGljIHZhciBcKHZhcmlhYmxlLm5hbWUpOiBcKHN0YXRpY01vZGlmaWVyKVZlcmlmeSB7IHJldHVybiBcKHN0YXRpY01vZGlmaWVyKVZlcmlmeShtZXRob2Q6IC5cKHByb3BlcnR5Q2FzZUdldE5hbWUpKSB9IgogICAgfQoKICAgIGZ1bmMgcHJvcGVydHlTZXQoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBzdGF0aWNNb2RpZmllciA9IHZhcmlhYmxlLmlzU3RhdGljID8gIlN0YXRpYyIgOiAiIgogICAgICAgIHJldHVybiAicHVibGljIHN0YXRpYyBmdW5jIFwodmFyaWFibGUubmFtZSkoc2V0IG5ld1ZhbHVlOiBcKG5lc3RlZFR5cGUpKSAtPiBcKHN0YXRpY01vZGlmaWVyKVZlcmlmeSB7IHJldHVybiBcKHN0YXRpY01vZGlmaWVyKVZlcmlmeShtZXRob2Q6IC5cKHByb3BlcnR5Q2FzZVNldE5hbWUpKG5ld1ZhbHVlKSkgfSIKICAgIH0KCiAgICB2YXIgcHJvcGVydHlDYXNlR2V0TmFtZTogU3RyaW5nIHsgcmV0dXJuICJwX1wodmFyaWFibGUubmFtZSlfZ2V0Ii5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogImAiLCB3aXRoOiAiIikgfQogICAgZnVuYyBwcm9wZXJ0eUNhc2VHZXQoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiY2FzZSBcKHByb3BlcnR5Q2FzZUdldE5hbWUpIgogICAgfQogICAgZnVuYyBwcm9wZXJ0eUNhc2VHZXRDb21wYXJlKCkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gImNhc2UgKC5cKHByb3BlcnR5Q2FzZUdldE5hbWUpLC5cKHByb3BlcnR5Q2FzZUdldE5hbWUpKTogcmV0dXJuIHRydWUiCiAgICB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZUdldEludFZhbHVlKCkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gImNhc2UgLlwocHJvcGVydHlDYXNlR2V0TmFtZSk6IHJldHVybiAwIgogICAgfQoKICAgIHZhciBwcm9wZXJ0eUNhc2VTZXROYW1lOiBTdHJpbmcgeyByZXR1cm4gInBfXCh2YXJpYWJsZS5uYW1lKV9zZXQiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKSB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZVNldCgpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJjYXNlIFwocHJvcGVydHlDYXNlU2V0TmFtZSkoXChuZXN0ZWRUeXBlKSkiCiAgICB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZVNldENvbXBhcmUoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiY2FzZSAoLlwocHJvcGVydHlDYXNlU2V0TmFtZSkobGV0IGxlZnQpLC5cKHByb3BlcnR5Q2FzZVNldE5hbWUpKGxldCByaWdodCkpOiByZXR1cm4gXChuZXN0ZWRUeXBlKS5jb21wYXJlKGxoczogbGVmdCwgcmhzOiByaWdodCwgd2l0aDogbWF0Y2hlcikiCiAgICB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZVNldEludFZhbHVlKCkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gImNhc2UgLlwocHJvcGVydHlDYXNlU2V0TmFtZSkobGV0IG5ld1ZhbHVlKTogcmV0dXJuIG5ld1ZhbHVlLmludFZhbHVlIgogICAgfQoKICAgIC8vIEdpdmVuCiAgICBmdW5jIGdpdmVuQ29uc3RydWN0b3JOYW1lKHByZWZpeDogU3RyaW5nID0gIiIpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJwdWJsaWMgc3RhdGljIGZ1bmMgXCh2YXJpYWJsZS5uYW1lKShnZXR0ZXIgZGVmYXVsdFZhbHVlOiBcKFR5cGVXcmFwcGVyKHZhcmlhYmxlLnR5cGVOYW1lKS5zdHJpcHBlZCkuLi4pIC0+IFwocHJlZml4KVByb3BlcnR5U3R1YiIKICAgIH0KCiAgICBmdW5jIGdpdmVuQ29uc3RydWN0b3IocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClHaXZlbihtZXRob2Q6IC5cKHByb3BlcnR5Q2FzZUdldE5hbWUpLCBwcm9kdWN0czogZGVmYXVsdFZhbHVlLm1hcCh7IFN0dWJQcm9kdWN0LnJldHVybigkMCBhcyBBbnkpIH0pKSIKICAgIH0KfQpfJT4KPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNFVFVQIC0lPjwlXyAtJT4KPCVfIHZhciBhbGwgPSB0eXBlcy5hbGwKICAgIGFsbCArPSB0eXBlcy5wcm90b2NvbHMubWFwIHsgJDAgfQogICAgdmFyIG1vY2tlZENvdW50ID0gMAotJT4KCjwlXyBmb3IgdHlwZSBpbiBhbGwgeyAtJT48JV8gLSU+CjwlXyBsZXQgYXV0b01vY2thYmxlOiBCb29sID0gdHlwZS5pbmhlcml0ZWRUeXBlcy5jb250YWlucygiQXV0b01vY2thYmxlIikgfHwgdHlwZS5hbm5vdGF0aW9uc1siQXV0b01vY2thYmxlIl0gIT0gbmlsCiAgICBsZXQgcHJvdG9jb2xUb0RlY29yYXRlID0gdHlwZXMucHJvdG9jb2xzLmZpcnN0KHdoZXJlOiB7ICQwLm5hbWUgPT0gKHR5cGUuYW5ub3RhdGlvbnNbIm1vY2siXSBhcz8gU3RyaW5nKSB9KQogICAgbGV0IGlubGluZU1vY2thYmxlID0gcHJvdG9jb2xUb0RlY29yYXRlICE9IG5pbAogICAgZ3VhcmQgbGV0IGFQcm90b2NvbCA9IGF1dG9Nb2NrYWJsZSA/IHR5cGUgOiBwcm90b2NvbFRvRGVjb3JhdGUgZWxzZSB7IGNvbnRpbnVlIH0KICAgIG1vY2tlZENvdW50ICs9IDEKICAgIGxldCBhc3NvY2lhdGVkVHlwZXM6IFtTdHJpbmddPyA9IEhlbHBlcnMuZXh0cmFjdEFzc29jaWF0ZWRUeXBlcyhmcm9tOiBhUHJvdG9jb2wpCiAgICBsZXQgdHlwZUFsaWFzZXM6IFtTdHJpbmddID0gSGVscGVycy5leHRyYWN0VHlwZWFsaWFzZXMoZnJvbTogYVByb3RvY29sKQogICAgbGV0IGdlbmVyaWNUeXBlc01vZGlmaWVyOiBTdHJpbmcgPSBIZWxwZXJzLmV4dHJhY3RHZW5lcmljVHlwZXNNb2RpZmllcihhc3NvY2lhdGVkVHlwZXMpCiAgICBsZXQgZ2VuZXJpY1R5cGVzQ29uc3RyYWludHM6IFN0cmluZyA9IEhlbHBlcnMuZXh0cmFjdEdlbmVyaWNUeXBlc0NvbnN0cmFpbnRzKGFzc29jaWF0ZWRUeXBlcykKICAgIGxldCBhbGxTdWJzY3JpcHRzID0gYVByb3RvY29sLmFsbFN1YnNjcmlwdHMKICAgIGxldCBhbGxWYXJpYWJsZXMgPSB1bmlxdWVzKHZhcmlhYmxlczogYVByb3RvY29sLmFsbFZhcmlhYmxlcy5maWx0ZXIoeyAhJDAuaXNTdGF0aWMgfSkpCiAgICBsZXQgY29udGFpbnNWYXJpYWJsZXMgPSAhYWxsVmFyaWFibGVzLmlzRW1wdHkKICAgIGxldCBhbGxTdGF0aWNWYXJpYWJsZXMgPSB1bmlxdWVzKHZhcmlhYmxlczogYVByb3RvY29sLmFsbFZhcmlhYmxlcy5maWx0ZXIoeyAkMC5pc1N0YXRpYyB9KSkKICAgIGxldCBjb250YWluc1N0YXRpY1ZhcmlhYmxlcyA9ICFhbGxTdGF0aWNWYXJpYWJsZXMuaXNFbXB0eQogICAgbGV0IGFsbE1ldGhvZHMgPSB1bmlxdWVzKG1ldGhvZHM6IGFQcm90b2NvbC5hbGxNZXRob2RzLmZpbHRlcih7ICEkMC5pc1N0YXRpYyB9KSkKICAgIGxldCBhY2Nlc3NNb2RpZmllcjogU3RyaW5nID0gewogICAgICAgIGxldCBzZWxmQ29uc3RyYWluZWQgPSBhbGxNZXRob2RzLm1hcCh3cmFwTWV0aG9kKS5jb250YWlucyh3aGVyZTogeyAkMC5yZXR1cm5zR2VuZXJpY0NvbnN0cmFpbmVkVG9TZWxmIHx8ICQwLnBhcmFtZXRlcnNDb250YWluc1NlbGYgfSkKICAgICAgICByZXR1cm4gc2VsZkNvbnN0cmFpbmVkID8gInB1YmxpYyBmaW5hbCIgOiAib3BlbiIKICAgIH0oKQogICAgbGV0IGFsbE1ldGhvZHNGb3JNZXRob2RUeXBlID0gdW5pcXVlc1dpdGhvdXRHZW5lcmljQ29uc3RyYWludHMobWV0aG9kczogYVByb3RvY29sLmFsbE1ldGhvZHMuZmlsdGVyKHsgISQwLmlzU3RhdGljIH0pKQogICAgbGV0IGFsbFN0YXRpY01ldGhvZHMgPSB1bmlxdWVzKG1ldGhvZHM6IGFQcm90b2NvbC5hbGxNZXRob2RzLmZpbHRlcih7ICQwLmlzU3RhdGljIH0pKQogICAgbGV0IGFsbFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlID0gdW5pcXVlc1dpdGhvdXRHZW5lcmljQ29uc3RyYWludHMobWV0aG9kczogYVByb3RvY29sLmFsbE1ldGhvZHMuZmlsdGVyKHsgJDAuaXNTdGF0aWMgfSkpCiAgICBsZXQgY29uZm9ybXNUb1N0YXRpY01vY2sgPSAhYWxsU3RhdGljTWV0aG9kcy5pc0VtcHR5IHx8ICFhbGxTdGF0aWNWYXJpYWJsZXMuaXNFbXB0eQogICAgbGV0IGNvbmZvcm1zVG9Nb2NrID0gIWFsbE1ldGhvZHMuaXNFbXB0eSB8fCAhYWxsVmFyaWFibGVzLmlzRW1wdHkgLSU+PCVfIC0lPjwlXyAtJT4KPCVfIGlmIGF1dG9Nb2NrYWJsZSB7IC0lPgovLyBNQVJLOiAtIDwlPSB0eXBlLm5hbWUgJT4KPCU9IGFjY2Vzc01vZGlmaWVyICU+IGNsYXNzIDwlPSB0eXBlLm5hbWUgJT5Nb2NrPCU9IGdlbmVyaWNUeXBlc01vZGlmaWVyICU+OjwlPSB0eXBlLmFubm90YXRpb25zWyJPYmpjUHJvdG9jb2wiXSAhPSBuaWwgPyAiIE5TT2JqZWN0LCIgOiAiIiAlPiA8JT0gdHlwZS5uYW1lICU+LCBNb2NrPCU9IGNvbmZvcm1zVG9TdGF0aWNNb2NrID8gIiwgU3RhdGljTW9jayIgOiAiIiAlPjwlPSBnZW5lcmljVHlwZXNDb25zdHJhaW50cyAlPiB7CiAgICBpbml0KHNlcXVlbmNpbmcgc2VxdWVuY2luZ1BvbGljeTogU2VxdWVuY2luZ1BvbGljeSA9IC5sYXN0V3JpdHRlblJlc29sdmVkRmlyc3QsIHN0dWJiaW5nIHN0dWJiaW5nUG9saWN5OiBTdHViYmluZ1BvbGljeSA9IC53cmFwLCBmaWxlOiBTdGF0aWNTdHJpbmcgPSAjZmlsZSwgbGluZTogVUludCA9ICNsaW5lKSB7CiAgICA8JV8gaWYgdHlwZS5hbm5vdGF0aW9uc1siT2JqY1Byb3RvY29sIl0gIT0gbmlsIHsgLSU+CiAgICAgICAgc3VwZXIuaW5pdCgpCiAgICA8JV8gfSAtJT4KICAgICAgICBzZWxmLnNlcXVlbmNpbmdQb2xpY3kgPSBzZXF1ZW5jaW5nUG9saWN5CiAgICAgICAgc2VsZi5zdHViYmluZ1BvbGljeSA9IHN0dWJiaW5nUG9saWN5CiAgICAgICAgc2VsZi5zZXR1cE1vY2soZmlsZTogZmlsZSwgbGluZTogbGluZSkKICAgIH0KCjwlXyB9IGVsc2UgeyAtJT4KLy8gc291cmNlcnk6aW5saW5lOmF1dG86PCU9IHR5cGUubmFtZSAlPi5hdXRvTW9ja2VkCjwlXyB9IC0lPgo8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gTUFJTiBDTEFTUyAtJT48JV8gLSU+CiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1PQ0sgSU5URVJOQUxTIC0lPjwlXyAtJT4KICAgIHByaXZhdGUgbGV0IHJlZ2lzdHJ5ID0gTW9ja1JlZ2lzdHJ5PE1ldGhvZFR5cGUsIEdpdmVuLCBWZXJpZnksIFBlcmZvcm0+KCkKICAgIHZhciBtYXRjaGVyOiBNYXRjaGVyIHsKICAgICAgICBnZXQgeyByZXR1cm4gcmVnaXN0cnkubWF0Y2hlciB9CiAgICAgICAgc2V0IHsgcmVnaXN0cnkubWF0Y2hlciA9IG5ld1ZhbHVlIH0KICAgIH0KICAgIHZhciBzdHViYmluZ1BvbGljeTogU3R1YmJpbmdQb2xpY3kgewogICAgICAgIGdldCB7IHJldHVybiByZWdpc3RyeS5zdHViYmluZ1BvbGljeSB9CiAgICAgICAgc2V0IHsgcmVnaXN0cnkuc3R1YmJpbmdQb2xpY3kgPSBuZXdWYWx1ZSB9CiAgICB9CiAgICB2YXIgc2VxdWVuY2luZ1BvbGljeTogU2VxdWVuY2luZ1BvbGljeSB7CiAgICAgICAgZ2V0IHsgcmV0dXJuIHJlZ2lzdHJ5LnNlcXVlbmNpbmdQb2xpY3kgfQogICAgICAgIHNldCB7IHJlZ2lzdHJ5LnNlcXVlbmNpbmdQb2xpY3kgPSBuZXdWYWx1ZSB9CiAgICB9CiAgICAKICAgIHB1YmxpYyB0eXBlYWxpYXMgUHJvcGVydHlTdHViID0gR2l2ZW4KICAgIHB1YmxpYyB0eXBlYWxpYXMgTWV0aG9kU3R1YiA9IEdpdmVuCiAgICBwdWJsaWMgdHlwZWFsaWFzIFN1YnNjcmlwdFN0dWIgPSBHaXZlbgogICAgPCVfIGZvciB0eXBlQWxpYXMgaW4gdHlwZUFsaWFzZXMgeyAtJT4KICAgIHB1YmxpYyB0eXBlYWxpYXMgPCU9IHR5cGVBbGlhcyAlPgogICAgPCVfIH0gJT4gPCVfIC0lPgoKICAgIC8vLyBDb252ZW5pZW5jZSBtZXRob2QgLSBjYWxsIHNldHVwTW9jaygpIHRvIGV4dGVuZCBkZWJ1ZyBpbmZvcm1hdGlvbiB3aGVuIGZhaWx1cmUgb2NjdXJzCiAgICBwdWJsaWMgZnVuYyBzZXR1cE1vY2soZmlsZTogU3RhdGljU3RyaW5nID0gI2ZpbGUsIGxpbmU6IFVJbnQgPSAjbGluZSkgewogICAgICAgIHJlZ2lzdHJ5LnNldHVwTW9jayhmaWxlOiBmaWxlLCBsaW5lOiBsaW5lKQogICAgfQoKICAgIC8vLyBDbGVhciBtb2NrIGludGVybmFscy4gWW91IGNhbiBzcGVjaWZ5IHdoYXQgdG8gcmVzZXQgKGludm9jYXRpb25zIGFrYSB2ZXJpZnksIGdpdmVucyBvciBwZXJmb3Jtcykgb3IgbGVhdmUgaXQgZW1wdHkgdG8gY2xlYXIgYWxsIG1vY2sgaW50ZXJuYWxzCiAgICBwdWJsaWMgZnVuYyByZXNldE1vY2soXyBzY29wZXM6IE1vY2tTY29wZS4uLikgewogICAgICAgIHJlZ2lzdHJ5LnJlc2V0TW9jayhzY29wZXMpCiAgICB9CiAgICA8JV8gLSU+CiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNUQVRJQyBNT0NLIElOVEVSTkFMUyAtJT48JV8gLSU+CiAgICA8JV8gaWYgY29uZm9ybXNUb1N0YXRpY01vY2sgeyAtJT4KCiAgICBzdGF0aWMgdmFyIHJlZ2lzdHJ5ID0gTW9ja1JlZ2lzdHJ5PFN0YXRpY01ldGhvZFR5cGUsIFN0YXRpY0dpdmVuLCBTdGF0aWNWZXJpZnksIFN0YXRpY1BlcmZvcm0+KCkKICAgIAogICAgc3RhdGljIHZhciBtYXRjaGVyOiBNYXRjaGVyIHsKICAgICAgICBnZXQgeyByZXR1cm4gcmVnaXN0cnkubWF0Y2hlciB9CiAgICAgICAgc2V0IHsgcmVnaXN0cnkubWF0Y2hlciA9IG5ld1ZhbHVlIH0KICAgIH0KICAgIHN0YXRpYyB2YXIgc3R1YmJpbmdQb2xpY3k6IFN0dWJiaW5nUG9saWN5IHsKICAgICAgICBnZXQgeyByZXR1cm4gcmVnaXN0cnkuc3R1YmJpbmdQb2xpY3kgfQogICAgICAgIHNldCB7IHJlZ2lzdHJ5LnN0dWJiaW5nUG9saWN5ID0gbmV3VmFsdWUgfQogICAgfQogICAgc3RhdGljIHZhciBzZXF1ZW5jaW5nUG9saWN5OiBTZXF1ZW5jaW5nUG9saWN5IHsKICAgICAgICBnZXQgeyByZXR1cm4gcmVnaXN0cnkuc2VxdWVuY2luZ1BvbGljeSB9CiAgICAgICAgc2V0IHsgcmVnaXN0cnkuc2VxdWVuY2luZ1BvbGljeSA9IG5ld1ZhbHVlIH0KICAgIH0KICAgIHB1YmxpYyB0eXBlYWxpYXMgU3RhdGljUHJvcGVydHlTdHViID0gU3RhdGljR2l2ZW4KICAgIHB1YmxpYyB0eXBlYWxpYXMgU3RhdGljTWV0aG9kU3R1YiA9IFN0YXRpY0dpdmVuCiAgICAKICAgIC8vLyBDbGVhciBtb2NrIGludGVybmFscy4gWW91IGNhbiBzcGVjaWZ5IHdoYXQgdG8gcmVzZXQgKGludm9jYXRpb25zIGFrYSB2ZXJpZnksIGdpdmVucyBvciBwZXJmb3Jtcykgb3IgbGVhdmUgaXQgZW1wdHkgdG8gY2xlYXIgYWxsIG1vY2sgaW50ZXJuYWxzCiAgICBwdWJsaWMgc3RhdGljIGZ1bmMgcmVzZXRNb2NrKF8gc2NvcGVzOiBNb2NrU2NvcGUuLi4pIHsKICAgICAgICByZWdpc3RyeS5yZXNldE1vY2soc2NvcGVzKQogICAgfQogICAgPCVfICB9IC0lPgoKICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVkFSSUFCTEVTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICA8JV8gaWYgYXV0b01vY2thYmxlIHsgLSU+CiAgICA8JT0gc3R1YlByb3BlcnR5KHZhcmlhYmxlLCJcKHR5cGUubmFtZSlNb2NrIikgJT4KICAgIDwlXyB9IGVsc2UgeyAlPgogICAgPCU9IHN0dWJQcm9wZXJ0eSh2YXJpYWJsZSwiXCh0eXBlLm5hbWUpIikgJT4KICAgIDwlXyB9ICU+CiAgICA8JV8gfSAlPiA8JV8gLSU+CgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTVEFUSUMgVkFSSUFCTEVTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgLSU+CiAgICA8JV8gaWYgYXV0b01vY2thYmxlIHsgLSU+CiAgICA8JT0gc3R1YlByb3BlcnR5KHZhcmlhYmxlLCJcKHR5cGUubmFtZSlNb2NrIikgJT4KICAgIDwlXyB9IGVsc2UgeyAlPgogICAgPCU9IHN0dWJQcm9wZXJ0eSh2YXJpYWJsZSwiXCh0eXBlLm5hbWUpIikgJT4KICAgIDwlXyB9ICU+CiAgICA8JV8gfSAlPiA8JV8gLSU+CgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBNRVRIT0QgUkVHSVNUUkFUSU9OUyAtJT48JV8gLSU+CiAgICA8JV8gTWV0aG9kV3JhcHBlci5jbGVhcigpIC0lPgogICAgPCVfIFN1YnNjcmlwdFdyYXBwZXIuY2xlYXIoKSAtJT4KICAgIDwlXyBpZiBhdXRvTW9ja2FibGUgeyAtJT4KICAgIDwlXyBDdXJyZW50LnNlbGZUeXBlID0gIlwodHlwZS5uYW1lKU1vY2tcKGdlbmVyaWNUeXBlc01vZGlmaWVyKSIgLSU+CiAgICA8JV8gfSBlbHNlIHsgJT4KICAgIDwlXyBDdXJyZW50LnNlbGZUeXBlID0gIlwodHlwZS5uYW1lKU1vY2tcKGdlbmVyaWNUeXBlc01vZGlmaWVyKSIgLSU+CiAgICA8JV8gfSAlPgogICAgPCVfIGxldCB3cmFwcGVkU3Vic2NyaXB0cyA9IGFsbFN1YnNjcmlwdHMubWFwKHdyYXBTdWJzY3JpcHQpIC0lPgogICAgPCVfIGxldCB3cmFwcGVkTWV0aG9kcyA9IGFsbE1ldGhvZHMubWFwKHdyYXBNZXRob2QpLmZpbHRlcih7ICQwLndyYXBwZWRJbk1ldGhvZFR5cGUoKSB9KSAtJT4KICAgIDwlXyBsZXQgd3JhcHBlZFZhcmlhYmxlcyA9IGFsbFZhcmlhYmxlcy5tYXAoanVzdFdyYXApIC0lPgogICAgPCVfIGxldCB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUgPSBhbGxNZXRob2RzRm9yTWV0aG9kVHlwZS5tYXAod3JhcE1ldGhvZCkuZmlsdGVyKHsgJDAud3JhcHBlZEluTWV0aG9kVHlwZSgpIH0pIC0lPgogICAgPCVfIGxldCB3cmFwcGVkSW5pdGlhbGl6ZXJzID0gYWxsTWV0aG9kcy5tYXAod3JhcE1ldGhvZCkuZmlsdGVyKHsgJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgLSU+CiAgICA8JV8gbGV0IHdyYXBwZWRTdGF0aWNNZXRob2RzID0gYWxsU3RhdGljTWV0aG9kcy5tYXAod3JhcE1ldGhvZCkuZmlsdGVyKHsgJDAud3JhcHBlZEluTWV0aG9kVHlwZSgpIH0pIC0lPgogICAgPCVfIGxldCB3cmFwcGVkU3RhdGljVmFyaWFibGVzID0gYWxsU3RhdGljVmFyaWFibGVzLm1hcChqdXN0V3JhcCkgLSU+CiAgICA8JV8gbGV0IHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSA9IGFsbFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlLm1hcCh3cmFwTWV0aG9kKS5maWx0ZXIoeyAkMC53cmFwcGVkSW5NZXRob2RUeXBlKCkgfSkgLSU+CiAgICA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFZhcmlhYmxlcyB7IHByb3BlcnR5UmVnaXN0ZXIodmFyaWFibGUpIH0gLSU+CiAgICA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFN0YXRpY1ZhcmlhYmxlcyB7IHByb3BlcnR5UmVnaXN0ZXIodmFyaWFibGUpIH0gLSU+CiAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kcyB7IG1ldGhvZC5yZWdpc3RlcigpIH0gLSU+CiAgICA8JV8gZm9yIHdyYXBwZWQgaW4gd3JhcHBlZFN1YnNjcmlwdHMgeyB3cmFwcGVkLnJlZ2lzdGVyKCkgfSAtJT4KICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzIHsgbWV0aG9kLnJlZ2lzdGVyKCkgfSAtJT48JV8gLSU+CiAgICA8JV8gbGV0IHZhcmlhYmxlQ2FzZXNDb3VudDogSW50ID0gd3JhcHBlZFZhcmlhYmxlcy5yZWR1Y2UoMCkgeyByZXR1cm4gJDAgKyAkMS5jYXNlc0NvdW50IH0gLSU+PCVfIC0lPgogICAgPCVfIGxldCBzdWJzY3JpcHRzQ2FzZXNDb3VudDogSW50ID0gd3JhcHBlZFN1YnNjcmlwdHMucmVkdWNlKDApIHsgcmV0dXJuICQwICsgJDEuY2FzZXNDb3VudCB9IC0lPjwlXyAtJT4KICAgIDwlXyBsZXQgc3RhdGljVmFyaWFibGVDYXNlc0NvdW50OiBJbnQgPSB3cmFwcGVkU3RhdGljVmFyaWFibGVzLnJlZHVjZSgwKSB7IHJldHVybiAkMCArICQxLmNhc2VzQ291bnQgfSAtJT48JV8gLSU+CiAgICA8JV8gbGV0IGdlbmVyYXRlT2xkQWNjZXNzb3JzRm9yTWV0aG9kczogQm9vbCA9IGZhbHNlIC0lPjwlXyAtJT4KICAgIDwlXyBsZXQgZ2VuZXJhdGVPbGRBY2Nlc3NvcnNGb3JTdGF0aWNNZXRob2RzOiBCb29sID0gZmFsc2UgLSU+PCVfIC0lPgoKICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU1RBVElDIFNUVUJTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzIHsgLSU+CiAgICA8JT0gbWV0aG9kLmZ1bmN0aW9uUHJvdG90eXBlIF8lPiB7CiAgICAgICAgPCU9IG1ldGhvZC5zdHViQm9keSgpIF8lPgogICAgfQoKICAgIDwlXyB9ICU+PCVfIC0lPgogICAgPCVfIC0lPgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBJTklUSUFMSVpFUlMgLSU+PCVfIC0lPgogICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZEluaXRpYWxpemVycyB7IC0lPgogICAgPCU9IG1ldGhvZC5mdW5jdGlvblByb3RvdHlwZSBfJT4geyB9CgogICAgPCVfIH0gLSU+PCVfIC0lPgogICAgPCVfIC0lPjwlXyAtJT4KICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU1RVQlMgLSU+PCVfIC0lPgogICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHMgeyAtJT4KICAgIDwlPSBtZXRob2QuZnVuY3Rpb25Qcm90b3R5cGUgXyU+IHsKICAgICAgICA8JT0gbWV0aG9kLnN0dWJCb2R5KCkgXyU+CiAgICB9CgogICAgPCVfIH0gLSU+CiAgICA8JV8gZm9yIHdyYXBwZWQgaW4gd3JhcHBlZFN1YnNjcmlwdHMgeyAtJT4KICAgIDwlPSB3cmFwcGVkLnN1YnNjcmlwdENhbGwoKSBfJT4KCiAgICA8JV8gfSAtJT4KICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU1RBVElDIE1FVEhPRCBUWVBFIC0lPjwlXyAtJT4KICAgIDwlXyBpZiBjb25mb3Jtc1RvU3RhdGljTW9jayB7IC0lPgogICAgcHVibGljIGVudW0gU3RhdGljTWV0aG9kVHlwZTogTWV0aG9kVHlwZVByb3RvY29sIHsKICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7IC0lPgogICAgICAgIGNhc2UgPCU9IG1ldGhvZC5tZXRob2RUeXBlRGVjbGFyYXRpb25XaXRoUGFyYW1ldGVycygpIF8lPgogICAgPCVfICB9ICU+IDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHByb3BlcnR5TWV0aG9kVHlwZXModmFyaWFibGUpICU+CiAgICA8JV8gfSAlPiA8JV8gJT4KICAgIDwlXyAtJT4KICAgICAgICBwdWJsaWMgc3RhdGljIGZ1bmMgY29tcGFyZVBhcmFtZXRlcnMobGhzOiBTdGF0aWNNZXRob2RUeXBlLCByaHM6IFN0YXRpY01ldGhvZFR5cGUsIG1hdGNoZXI6IE1hdGNoZXIpIC0+IEJvb2wgewogICAgICAgICAgICBzd2l0Y2ggKGxocywgcmhzKSB7IDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7ICU+CiAgICAgICAgICAgIDwlPSBtZXRob2QuZXF1YWxDYXNlIC0lPjwlIGZvciBwYXJhbWV0ZXIgaW4gbWV0aG9kLnBhcmFtZXRlcnMgeyAlPgogICAgICAgICAgICAgICAgPCU9IHBhcmFtZXRlci5jb21wYXJhdG9yIC0lPiA8JSAgfSAlPgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUgPCUgfSAlPgogICAgICAgICAgICA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFN0YXRpY1ZhcmlhYmxlcyB7IC0lPgogICAgICAgICAgICA8JT0gcHJvcGVydHlNZXRob2RUeXBlc0NvbXBhcmUodmFyaWFibGUpICU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPiA8JV8gaWYgd3JhcHBlZFN0YXRpY01ldGhvZHMuY291bnQgKyBzdGF0aWNWYXJpYWJsZUNhc2VzQ291bnQgPiAxIHsgLSU+CiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZQogICAgICAgICAgICA8JV8gfSAtJT4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIDwlXyAlPgogICAgICAgIHB1YmxpYyBmdW5jIGludFZhbHVlKCkgLT4gSW50IHsKICAgICAgICAgICAgc3dpdGNoIHNlbGYgeyA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAlPgogICAgICAgICAgICAgICAgPCU9IG1ldGhvZC5pbnRWYWx1ZUNhc2UgLSU+PCUgfSAlPgogICAgICAgICAgICAgICAgPCVfIGZvciB2YXJpYWJsZSBpbiBhbGxTdGF0aWNWYXJpYWJsZXMgeyAtJT4KICAgICAgICAgICAgICAgIDwlPSBwcm9wZXJ0eU1ldGhvZFR5cGVzSW50VmFsdWUodmFyaWFibGUpICU+CiAgICAgICAgICAgICAgICA8JV8gfSAlPiA8JV8gLSU+CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgb3BlbiBjbGFzcyBTdGF0aWNHaXZlbjogU3R1YmJlZE1ldGhvZCwgR2l2ZW5Qcm90b2NvbCB7CiAgICAgICAgcHVibGljIHZhciBtZXRob2Q6IFN0YXRpY01ldGhvZFR5cGUKCiAgICAgICAgcHJpdmF0ZSBpbml0KG1ldGhvZDogU3RhdGljTWV0aG9kVHlwZSwgcHJvZHVjdHM6IFtTdHViUHJvZHVjdF0pIHsKICAgICAgICAgICAgc2VsZi5tZXRob2QgPSBtZXRob2QKICAgICAgICAgICAgc3VwZXIuaW5pdChwcm9kdWN0cykKICAgICAgICB9CgogICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHdyYXBQcm9wZXJ0eSh2YXJpYWJsZSkuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiU3RhdGljIikgLSU+IHsKICAgICAgICAgICAgPCU9IHdyYXBQcm9wZXJ0eSh2YXJpYWJsZSkuZ2l2ZW5Db25zdHJ1Y3RvcihwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfICU+CiAgICAgICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlLmZpbHRlcih7ICEkMC5tZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkICYmICEkMC5tZXRob2QuaXNJbml0aWFsaXplciB9KSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiU3RhdGljIikgLSU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gaWYgZ2VuZXJhdGVPbGRBY2Nlc3NvcnNGb3JTdGF0aWNNZXRob2RzLCBtZXRob2QuY29udGFpbnNFbXB0eUFyZ3VtZW50TGFiZWxzKCkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuQ29uc3RydWN0b3JOYW1lKHByZWZpeDogIlN0YXRpYyIsIGRlcHJlY2F0ZWQ6IHRydWUpICU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUuZmlsdGVyKHsgISQwLm1ldGhvZC50aHJvd3MgJiYgISQwLm1ldGhvZC5yZXRocm93cyAmJiAhJDAubWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAmJiAhJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICJTdGF0aWMiKSAtJT4gewogICAgICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUuZmlsdGVyKHsgKCQwLm1ldGhvZC50aHJvd3MgfHwgJDAubWV0aG9kLnJldGhyb3dzKSAmJiAhJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuQ29uc3RydWN0b3JOYW1lVGhyb3dzKHByZWZpeDogIlN0YXRpYyIpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3RvclRocm93cyhwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIGlmIGdlbmVyYXRlT2xkQWNjZXNzb3JzRm9yU3RhdGljTWV0aG9kcywgbWV0aG9kLmNvbnRhaW5zRW1wdHlBcmd1bWVudExhYmVscygpIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yTmFtZVRocm93cyhwcmVmaXg6ICJTdGF0aWMiLCBkZXByZWNhdGVkOiB0cnVlKSAlPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3RvclRocm93cyhwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgPCU9IG1ldGhvZC5naXZlblByb2R1Y2VDb25zdHJ1Y3Rvck5hbWVUaHJvd3MocHJlZml4OiAiU3RhdGljIikgLSU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlblByb2R1Y2VDb25zdHJ1Y3RvclRocm93cyhwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgU3RhdGljVmVyaWZ5OiBWZXJpZnlQcm90b2NvbCB7CiAgICAgICAgcHVibGljIHZhciBtZXRob2Q6IFN0YXRpY01ldGhvZFR5cGUKCiAgICAgICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC52ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICJTdGF0aWMiKSAtJT4geyA8JT0gbWV0aG9kLnZlcmlmaWNhdGlvblByb3h5Q29uc3RydWN0b3IocHJlZml4OiAiU3RhdGljIikgXyU+IH0KICAgICAgICA8JV8gaWYgZ2VuZXJhdGVPbGRBY2Nlc3NvcnNGb3JTdGF0aWNNZXRob2RzLCBtZXRob2QuY29udGFpbnNFbXB0eUFyZ3VtZW50TGFiZWxzKCkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLnZlcmlmaWNhdGlvblByb3h5Q29uc3RydWN0b3JOYW1lKHByZWZpeDogIlN0YXRpYyIsIGRlcHJlY2F0ZWQ6IHRydWUpICU+IHsgPCU9IG1ldGhvZC52ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPiB9CiAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHByb3BlcnR5VHlwZXModmFyaWFibGUpICU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgU3RhdGljUGVyZm9ybTogUGVyZm9ybVByb3RvY29sIHsKICAgICAgICBwdWJsaWMgdmFyIG1ldGhvZDogU3RhdGljTWV0aG9kVHlwZQogICAgICAgIHB1YmxpYyB2YXIgcGVyZm9ybXM6IEFueQoKICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLnBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICJTdGF0aWMiKSAtJT4gewogICAgICAgICAgICA8JT0gbWV0aG9kLnBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gaWYgZ2VuZXJhdGVPbGRBY2Nlc3NvcnNGb3JTdGF0aWNNZXRob2RzLCBtZXRob2QuY29udGFpbnNFbXB0eUFyZ3VtZW50TGFiZWxzKCkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLnBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICJTdGF0aWMiLCBkZXByZWNhdGVkOiB0cnVlKSAlPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QucGVyZm9ybVByb3h5Q29uc3RydWN0b3IocHJlZml4OiAiU3RhdGljIikgXyU+CiAgICAgICAgfQogICAgICAgIDwlXyB9IC0lPgogICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgIH0KCiAgICA8JSB9IC0lPgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBNRVRIT0QgVFlQRSAtJT48JV8gLSU+CiAgICA8JV8gaWYgIXdyYXBwZWRNZXRob2RzLmlzRW1wdHkgfHwgIWFsbFZhcmlhYmxlcy5pc0VtcHR5IHx8ICFhbGxTdWJzY3JpcHRzLmlzRW1wdHkgeyAtJT4KCiAgICBwdWJsaWMgZW51bSBNZXRob2RUeXBlOiBNZXRob2RUeXBlUHJvdG9jb2wgewogICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlIHsgLSU+CiAgICAgICAgY2FzZSA8JT0gbWV0aG9kLm1ldGhvZFR5cGVEZWNsYXJhdGlvbldpdGhQYXJhbWV0ZXJzKCkgXyU+CiAgICA8JV8gIH0gLSU+IDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHByb3BlcnR5TWV0aG9kVHlwZXModmFyaWFibGUpICU+CiAgICA8JV8gfSAlPiA8JV8gJT4gPCVfIGZvciB3cmFwcGVkIGluIHdyYXBwZWRTdWJzY3JpcHRzIHsgLSU+CiAgICAgICAgPCU9IHdyYXBwZWQuc3Vic2NyaXB0Q2FzZXMoKSBfJT4KICAgIDwlXyB9ICU+IDwlXyAlPgogICAgPCVfIC0lPgogICAgICAgIHB1YmxpYyBzdGF0aWMgZnVuYyBjb21wYXJlUGFyYW1ldGVycyhsaHM6IE1ldGhvZFR5cGUsIHJoczogTWV0aG9kVHlwZSwgbWF0Y2hlcjogTWF0Y2hlcikgLT4gQm9vbCB7CiAgICAgICAgICAgIHN3aXRjaCAobGhzLCByaHMpIHsgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlIHsgJT4KICAgICAgICAgICAgPCU9IG1ldGhvZC5lcXVhbENhc2UgLSU+PCUgZm9yIHBhcmFtZXRlciBpbiBtZXRob2QucGFyYW1ldGVycyB7ICU+CiAgICAgICAgICAgICAgICA8JT0gcGFyYW1ldGVyLmNvbXBhcmF0b3IgLSU+IDwlICB9ICU+CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZSA8JSB9ICU+CiAgICAgICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICAgICAgICAgIDwlPSBwcm9wZXJ0eU1ldGhvZFR5cGVzQ29tcGFyZSh2YXJpYWJsZSkgJT4KICAgICAgICAgICAgPCVfIH0gJT4gPCVfIC0lPiA8JV8gZm9yIHdyYXBwZWQgaW4gd3JhcHBlZFN1YnNjcmlwdHMgeyAtJT4KICAgICAgICAgICAgPCU9IHdyYXBwZWQuZXF1YWxDYXNlcygpICU+CiAgICAgICAgPCVfIH0gJT4gPCVfIGlmIHdyYXBwZWRNZXRob2RzLmNvdW50ICsgdmFyaWFibGVDYXNlc0NvdW50ICsgc3Vic2NyaXB0c0Nhc2VzQ291bnQgPiAxIHsgLSU+CiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZQogICAgICAgICAgICA8JV8gfSAtJT4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIDwlXyAlPgogICAgICAgIHB1YmxpYyBmdW5jIGludFZhbHVlKCkgLT4gSW50IHsKICAgICAgICAgICAgc3dpdGNoIHNlbGYgeyA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAlPgogICAgICAgICAgICA8JT0gbWV0aG9kLmludFZhbHVlQ2FzZSAtJT48JSB9ICU+CiAgICAgICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICAgICAgICAgIDwlPSBwcm9wZXJ0eU1ldGhvZFR5cGVzSW50VmFsdWUodmFyaWFibGUpICU+CiAgICAgICAgICAgIDwlXyB9ICU+IDwlXyBmb3Igd3JhcHBlZCBpbiB3cmFwcGVkU3Vic2NyaXB0cyB7IC0lPgogICAgICAgICAgICA8JT0gd3JhcHBlZC5pbnRWYWx1ZUNhc2UoKSAlPgogICAgICAgICAgICA8JV8gfSAtJT4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIDwlXyB9IGVsc2UgeyAlPgogICAgcHVibGljIHN0cnVjdCBNZXRob2RUeXBlOiBNZXRob2RUeXBlUHJvdG9jb2wgewogICAgICAgIHB1YmxpYyBzdGF0aWMgZnVuYyBjb21wYXJlUGFyYW1ldGVycyhsaHM6IE1ldGhvZFR5cGUsIHJoczogTWV0aG9kVHlwZSwgbWF0Y2hlcjogTWF0Y2hlcikgLT4gQm9vbCB7IHJldHVybiB0cnVlIH0KICAgICAgICBwdWJsaWMgZnVuYyBpbnRWYWx1ZSgpIC0+IEludCB7IHJldHVybiAwIH0KICAgIH0KICAgIDwlXyB9IC0lPjwlXyAtJT4KCiAgICBvcGVuIGNsYXNzIEdpdmVuOiBTdHViYmVkTWV0aG9kLCBHaXZlblByb3RvY29sIHsKICAgICAgICBwdWJsaWMgdmFyIG1ldGhvZDogTWV0aG9kVHlwZQoKICAgICAgICBwcml2YXRlIGluaXQobWV0aG9kOiBNZXRob2RUeXBlLCBwcm9kdWN0czogW1N0dWJQcm9kdWN0XSkgewogICAgICAgICAgICBzZWxmLm1ldGhvZCA9IG1ldGhvZAogICAgICAgICAgICBzdXBlci5pbml0KHByb2R1Y3RzKQogICAgICAgIH0KCiAgICAgICAgPCVfIGZvciB2YXJpYWJsZSBpbiBhbGxWYXJpYWJsZXMgeyAtJT4KICAgICAgICA8JT0gd3JhcFByb3BlcnR5KHZhcmlhYmxlKS5naXZlbkNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7CiAgICAgICAgICAgIDwlPSB3cmFwUHJvcGVydHkodmFyaWFibGUpLmdpdmVuQ29uc3RydWN0b3IoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfICU+CiAgICAgICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlLmZpbHRlcih7ICEkMC5tZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkICYmICEkMC5tZXRob2QuaXNJbml0aWFsaXplciB9KSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUoKSAtJT4gewogICAgICAgICAgICA8JT0gbWV0aG9kLmdpdmVuQ29uc3RydWN0b3IoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIGlmIGdlbmVyYXRlT2xkQWNjZXNzb3JzRm9yTWV0aG9kcywgbWV0aG9kLmNvbnRhaW5zRW1wdHlBcmd1bWVudExhYmVscygpIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICIiLCBkZXByZWNhdGVkOiB0cnVlKSAlPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3RvcigpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUuZmlsdGVyKHsgISQwLm1ldGhvZC50aHJvd3MgJiYgISQwLm1ldGhvZC5yZXRocm93cyAmJiAhJDAubWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAmJiAhJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Qcm9kdWNlQ29uc3RydWN0b3IoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgPCVfIGZvciB3cmFwcGVkIGluIHdyYXBwZWRTdWJzY3JpcHRzIHsgLSU+CiAgICAgICAgPCU9IHdyYXBwZWQuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUoKSAtJT4gewogICAgICAgICAgICA8JT0gd3JhcHBlZC5naXZlbkNvbnN0cnVjdG9yKCkgXyU+CiAgICAgICAgfQogICAgICAgIDwlXyB9IC0lPgogICAgICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRNZXRob2RzRm9yTWV0aG9kVHlwZS5maWx0ZXIoeyAoJDAubWV0aG9kLnRocm93cyB8fCAkMC5tZXRob2QucmV0aHJvd3MpICYmICEkMC5tZXRob2QuaXNJbml0aWFsaXplciB9KSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWVUaHJvd3MoKSAtJT4gewogICAgICAgICAgICA8JT0gbWV0aG9kLmdpdmVuQ29uc3RydWN0b3JUaHJvd3MoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIGlmIGdlbmVyYXRlT2xkQWNjZXNzb3JzRm9yTWV0aG9kcywgbWV0aG9kLmNvbnRhaW5zRW1wdHlBcmd1bWVudExhYmVscygpIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yTmFtZVRocm93cyhwcmVmaXg6ICIiLCBkZXByZWNhdGVkOiB0cnVlKSAlPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3RvclRocm93cygpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yTmFtZVRocm93cygpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Qcm9kdWNlQ29uc3RydWN0b3JUaHJvd3MoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgVmVyaWZ5OiBWZXJpZnlQcm90b2NvbCB7CiAgICAgICAgcHVibGljIHZhciBtZXRob2Q6IE1ldGhvZFR5cGUKCiAgICAgICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC52ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7IDwlPSBtZXRob2QudmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3RvcigpIF8lPiB9CiAgICAgICAgPCVfIGlmIGdlbmVyYXRlT2xkQWNjZXNzb3JzRm9yTWV0aG9kcywgbWV0aG9kLmNvbnRhaW5zRW1wdHlBcmd1bWVudExhYmVscygpIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC52ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICIiLCBkZXByZWNhdGVkOiB0cnVlKSAlPiB7IDwlPSBtZXRob2QudmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3RvcigpIF8lPiB9CiAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHByb3BlcnR5VHlwZXModmFyaWFibGUpICU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgICAgIDwlXyBmb3Igd3JhcHBlZCBpbiB3cmFwcGVkU3Vic2NyaXB0cyB7IC0lPgogICAgICAgIDwlPSB3cmFwcGVkLnZlcmlmeUNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7IDwlPSB3cmFwcGVkLnZlcmlmeUNvbnN0cnVjdG9yKCkgXyU+IH0KICAgICAgICA8JV8gaWYgIXdyYXBwZWQucmVhZG9ubHkgeyAtJT4KICAgICAgICA8JT0gd3JhcHBlZC52ZXJpZnlDb25zdHJ1Y3Rvck5hbWUoc2V0OiB0cnVlKSAtJT4geyA8JT0gd3JhcHBlZC52ZXJpZnlDb25zdHJ1Y3RvcihzZXQ6IHRydWUpIF8lPiB9CiAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgUGVyZm9ybTogUGVyZm9ybVByb3RvY29sIHsKICAgICAgICBwdWJsaWMgdmFyIG1ldGhvZDogTWV0aG9kVHlwZQogICAgICAgIHB1YmxpYyB2YXIgcGVyZm9ybXM6IEFueQoKICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLnBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QucGVyZm9ybVByb3h5Q29uc3RydWN0b3IoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIGlmIGdlbmVyYXRlT2xkQWNjZXNzb3JzRm9yTWV0aG9kcywgbWV0aG9kLmNvbnRhaW5zRW1wdHlBcmd1bWVudExhYmVscygpIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC5wZXJmb3JtUHJveHlDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiIiwgZGVwcmVjYXRlZDogdHJ1ZSkgJT4gewogICAgICAgICAgICA8JT0gbWV0aG9kLnBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yKCkgXyU+CiAgICAgICAgfQogICAgICAgIDwlXyB9IC0lPgogICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgIH0KCiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1PQ0sgTUVUSE9EUyAtJT48JV8gLSU+CiAgICBwdWJsaWMgZnVuYyBnaXZlbihfIG1ldGhvZDogR2l2ZW4pIHsKICAgICAgICByZWdpc3RyeS5naXZlbihtZXRob2QpCiAgICB9CgogICAgcHVibGljIGZ1bmMgcGVyZm9ybShfIG1ldGhvZDogUGVyZm9ybSkgewogICAgICAgIHJlZ2lzdHJ5LnBlcmZvcm0obWV0aG9kKQogICAgfQoKICAgIHB1YmxpYyBmdW5jIHZlcmlmeShfIG1ldGhvZDogVmVyaWZ5LCBjb3VudDogQ291bnQgPSBDb3VudC5tb3JlT3JFcXVhbCh0bzogMSksIGZpbGU6IFN0YXRpY1N0cmluZyA9ICNmaWxlLCBsaW5lOiBVSW50ID0gI2xpbmUpIHsKICAgICAgICByZWdpc3RyeS52ZXJpZnkobWV0aG9kLCBjb3VudDogY291bnQsIGZpbGU6IGZpbGUsIGxpbmU6IGxpbmUpCiAgICB9CiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNUQVRJQyBNT0NLIE1FVEhPRFMgLSU+PCVfIC0lPgogICAgPCVfIGlmIGNvbmZvcm1zVG9TdGF0aWNNb2NrIHsgLSU+CgogICAgc3RhdGljIHB1YmxpYyBmdW5jIGdpdmVuKF8gbWV0aG9kOiBTdGF0aWNHaXZlbikgewogICAgICAgIHJlZ2lzdHJ5LmdpdmVuKG1ldGhvZCkKICAgIH0KCiAgICBzdGF0aWMgcHVibGljIGZ1bmMgcGVyZm9ybShfIG1ldGhvZDogU3RhdGljUGVyZm9ybSkgewogICAgICAgIHJlZ2lzdHJ5LnBlcmZvcm0obWV0aG9kKQogICAgfQoKICAgIHN0YXRpYyBwdWJsaWMgZnVuYyB2ZXJpZnkoXyBtZXRob2Q6IFN0YXRpY1ZlcmlmeSwgY291bnQ6IENvdW50ID0gQ291bnQubW9yZU9yRXF1YWwodG86IDEpLCBmaWxlOiBTdGF0aWNTdHJpbmcgPSAjZmlsZSwgbGluZTogVUludCA9ICNsaW5lKSB7CiAgICAgICAgcmVnaXN0cnkudmVyaWZ5KG1ldGhvZCwgY291bnQ6IGNvdW50LCBmaWxlOiBmaWxlLCBsaW5lOiBsaW5lKQogICAgfQogICAgPCVfIH0gLSU+CjwlXyBpZiBhdXRvTW9ja2FibGUgeyAtJT4KfQoKPCVfIH0gZWxzZSB7IC0lPgovLyBzb3VyY2VyeTplbmQKPCVfIH0gLSU+CjwlIH0gLSU+CjwlXyBpZiBtb2NrZWRDb3VudCA9PSAwIHsgLSU+Ci8vIFN3aWZ0eU1vY2t5OiBubyBBdXRvTW9ja2FibGUgZm91bmQuCi8vIFBsZWFzZSBkZWZpbmUgYW5kIGluaGVyaXQgZnJvbSBBdXRvTW9ja2FibGUsIG9yIGFubm90YXRlIHByb3RvY29scyB0byBiZSBtb2NrZWQKPCVfIH0gLSU+Cg=="
    )
    static let prototype = File(
        name: "Mock.swifttemplate",
        contents: ""
    )
}
